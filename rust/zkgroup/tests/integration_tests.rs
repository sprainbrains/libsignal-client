//
// Copyright 2020 Signal Messenger, LLC.
// SPDX-License-Identifier: AGPL-3.0-only
//

extern crate zkgroup;

use curve25519_dalek::ristretto::RistrettoPoint;
use sha2::Sha256;

#[test]
fn test_lizard() {
    let p = RistrettoPoint::lizard_encode::<Sha256>(&zkgroup::common::constants::TEST_ARRAY_16);
    let data_out = p.lizard_decode::<Sha256>();
    assert!(data_out.unwrap() == zkgroup::common::constants::TEST_ARRAY_16);
}
pub const AUTH_CREDENTIAL_PRESENTATION_V1_RESULT: [u8;
    zkgroup::AUTH_CREDENTIAL_PRESENTATION_V1_LEN] = [
    0x00, 0x0c, 0xde, 0x97, 0x97, 0x37, 0xed, 0x30, 0xbb, 0xeb, 0x16, 0x36, 0x2e, 0x4e, 0x07, 0x69,
    0x45, 0xce, 0x02, 0x06, 0x9f, 0x72, 0x7b, 0x0e, 0xd4, 0xc3, 0xc3, 0x3c, 0x01, 0x1e, 0x82, 0x54,
    0x6e, 0x1c, 0xdf, 0x08, 0x1f, 0xbd, 0xf3, 0x7c, 0x03, 0xa8, 0x51, 0xad, 0x06, 0x0b, 0xdc, 0xbf,
    0x63, 0x78, 0xcb, 0x4c, 0xb1, 0x6d, 0xc3, 0x15, 0x4d, 0x08, 0xde, 0x54, 0x39, 0xb5, 0x32, 0x32,
    0x03, 0x72, 0x9d, 0x18, 0x41, 0xb5, 0x17, 0x03, 0x3a, 0xf2, 0xfd, 0x17, 0x7d, 0x30, 0x49, 0x1c,
    0x13, 0x8a, 0xe7, 0x23, 0x65, 0x57, 0x34, 0xf6, 0xe5, 0xcc, 0x01, 0xc0, 0x06, 0x96, 0xf4, 0xe9,
    0x20, 0x96, 0xd8, 0xc3, 0x3d, 0xf2, 0x6b, 0xa2, 0xa8, 0x20, 0xd4, 0x2e, 0x97, 0x35, 0xd3, 0x0f,
    0x8e, 0xee, 0xf9, 0x6d, 0x39, 0x90, 0x79, 0x07, 0x3c, 0x09, 0x9f, 0x70, 0x35, 0x52, 0x3b, 0xfe,
    0x71, 0x66, 0x38, 0x65, 0x93, 0x19, 0xd3, 0xc3, 0x6a, 0xd3, 0x4c, 0x00, 0xef, 0x88, 0x50, 0xf6,
    0x63, 0xc4, 0xd9, 0x30, 0x30, 0x23, 0x50, 0x74, 0x31, 0x2a, 0x88, 0x78, 0xb6, 0xa5, 0xc5, 0xdf,
    0x4f, 0xbc, 0x7d, 0x32, 0x93, 0x52, 0x78, 0xbf, 0xa5, 0x99, 0x6b, 0x44, 0xab, 0x75, 0xd6, 0xf0,
    0x6f, 0x4c, 0x30, 0xb9, 0x86, 0x40, 0xad, 0x5d, 0xe7, 0x47, 0x42, 0x65, 0x6c, 0x89, 0x77, 0x56,
    0x7d, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfd, 0xe6, 0x9f, 0x82, 0xad, 0x2d, 0xcb,
    0x49, 0x09, 0x65, 0x0a, 0xc6, 0xb2, 0x57, 0x38, 0x41, 0xaf, 0x56, 0x8f, 0xef, 0x82, 0x2b, 0x32,
    0xb4, 0x5f, 0x62, 0x5a, 0x76, 0x46, 0x91, 0xa7, 0x04, 0xd1, 0x1b, 0x6f, 0x38, 0x52, 0x61, 0x46,
    0x81, 0x17, 0xea, 0xd5, 0x7f, 0xa6, 0x23, 0x33, 0x8e, 0x21, 0xc6, 0x6e, 0xd8, 0x46, 0xab, 0x65,
    0x80, 0x9f, 0xca, 0xc1, 0x58, 0x06, 0x6d, 0x8e, 0x0e, 0x44, 0x40, 0x77, 0xb9, 0x95, 0x40, 0xd8,
    0x86, 0xe7, 0xdc, 0x09, 0x55, 0x5d, 0xd6, 0xfa, 0xea, 0x2c, 0xd3, 0x69, 0x7f, 0x1e, 0x08, 0x9f,
    0x82, 0xd5, 0x4e, 0x5d, 0x0f, 0xe4, 0xa1, 0x85, 0x00, 0x8b, 0x5c, 0xbc, 0x39, 0x79, 0x39, 0x1a,
    0xd7, 0x16, 0x86, 0xbc, 0x03, 0xbe, 0x7b, 0x00, 0xea, 0x7e, 0x42, 0xc0, 0x8d, 0x9f, 0x1d, 0x75,
    0xc3, 0xa5, 0x6c, 0x27, 0xae, 0x24, 0x67, 0xb8, 0x06, 0x36, 0xc0, 0xb5, 0x34, 0x3e, 0xda, 0x7c,
    0xd5, 0x78, 0xba, 0x88, 0xdd, 0xb7, 0xa0, 0x76, 0x65, 0x68, 0x47, 0x7f, 0xed, 0x63, 0xcf, 0x53,
    0x18, 0x62, 0x12, 0x2c, 0x6c, 0x15, 0xb4, 0xa7, 0x07, 0x97, 0x3d, 0x41, 0x78, 0x2c, 0xfc, 0x0e,
    0xf4, 0xfe, 0x6c, 0x31, 0x15, 0x98, 0x8a, 0x2e, 0x33, 0x90, 0x15, 0x93, 0x8d, 0x2d, 0xf0, 0xa5,
    0xd3, 0x02, 0x37, 0xa2, 0x59, 0x2c, 0xc1, 0x0c, 0x05, 0xa9, 0xe4, 0xef, 0x6b, 0x69, 0x5b, 0xca,
    0x99, 0x73, 0x6b, 0x1a, 0x49, 0xea, 0x39, 0x60, 0x6a, 0x38, 0x1e, 0xcf, 0xb0, 0x5e, 0xfe, 0x60,
    0xd2, 0x8b, 0x54, 0x82, 0x3e, 0xc5, 0xa3, 0x68, 0x0c, 0x76, 0x5d, 0xe9, 0xdf, 0x4c, 0xfa, 0x54,
    0x87, 0xf3, 0x60, 0xe2, 0x9e, 0x99, 0x34, 0x3e, 0x91, 0x81, 0x1b, 0xae, 0xc3, 0x31, 0xc4, 0x68,
    0x09, 0x85, 0xe6, 0x08, 0xca, 0x5d, 0x40, 0x8e, 0x21, 0x72, 0x5c, 0x6a, 0xa1, 0xb6, 0x1d, 0x5a,
    0x8b, 0x48, 0xd7, 0x5f, 0x4a, 0xaa, 0x9a, 0x3c, 0xbe, 0x88, 0xd3, 0xe0, 0xf1, 0xa5, 0x43, 0x19,
    0x08, 0x1f, 0x77, 0xc7, 0x2c, 0x8f, 0x52, 0x54, 0x74, 0x40, 0xe2, 0x01, 0x00,
];

pub const AUTH_CREDENTIAL_PRESENTATION_V2_RESULT: [u8;
    zkgroup::AUTH_CREDENTIAL_PRESENTATION_V2_LEN] = [
    0x01, 0x32, 0x2f, 0x91, 0x00, 0xde, 0x07, 0x34, 0x55, 0x0a, 0x81, 0xdc, 0x81, 0x72, 0x4a, 0x81,
    0xdb, 0xd3, 0xb1, 0xb4, 0x3d, 0xbc, 0x1d, 0x55, 0x2d, 0x53, 0x45, 0x59, 0x11, 0xc2, 0x77, 0x2f,
    0x34, 0xa6, 0x35, 0x6c, 0xa1, 0x7c, 0x6d, 0x34, 0xd8, 0x58, 0x39, 0x14, 0x56, 0xaf, 0x55, 0xd0,
    0xef, 0x84, 0x1f, 0xbe, 0x1f, 0xa8, 0xc4, 0xee, 0x81, 0x0f, 0x21, 0xe0, 0xbb, 0x9f, 0x4a, 0xce,
    0x4c, 0x5c, 0x48, 0xc7, 0x2e, 0xbb, 0xeb, 0x2c, 0xcd, 0xa5, 0xf7, 0xaa, 0x49, 0xae, 0xe6, 0xbc,
    0x00, 0x51, 0xcd, 0xde, 0x16, 0x6e, 0x0f, 0x8c, 0x5f, 0x1f, 0xeb, 0xd5, 0x3a, 0x44, 0x37, 0xc5,
    0x70, 0xee, 0x1a, 0xa2, 0x23, 0xf5, 0xeb, 0x93, 0x7d, 0xb9, 0x8f, 0x34, 0xe3, 0x65, 0x3d, 0x85,
    0xec, 0x16, 0x3f, 0x39, 0x84, 0x72, 0x22, 0xa2, 0xde, 0xc4, 0x23, 0x5e, 0xa4, 0x1c, 0x47, 0xbb,
    0x62, 0x02, 0x8a, 0xae, 0x30, 0x94, 0x58, 0x57, 0xee, 0x77, 0x66, 0x30, 0x79, 0xbc, 0xc4, 0x92,
    0x3d, 0x14, 0xa4, 0x3a, 0xd4, 0xf6, 0xbc, 0x33, 0x71, 0x50, 0x46, 0xf7, 0xbd, 0xe5, 0x27, 0x15,
    0x37, 0x5c, 0xa9, 0xf8, 0x9b, 0xe0, 0xe6, 0x30, 0xd4, 0xbd, 0xaa, 0x21, 0x11, 0x56, 0xd0, 0x30,
    0x67, 0x23, 0xf5, 0x43, 0xb0, 0x6f, 0x5e, 0x99, 0x84, 0x47, 0xb9, 0x62, 0xc8, 0xe9, 0x72, 0x9b,
    0x4c, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0xd0, 0xea, 0xe8, 0xe4, 0x31, 0x1a,
    0x6a, 0xe3, 0xd2, 0x97, 0x0e, 0xf1, 0x98, 0xc3, 0x98, 0x11, 0x04, 0x62, 0xbe, 0x47, 0xdd, 0x2f,
    0x26, 0xe6, 0x55, 0x92, 0x09, 0xef, 0x6c, 0xc2, 0x00, 0x01, 0xa0, 0x5a, 0x0b, 0x31, 0x9a, 0x17,
    0x2d, 0xbe, 0xb2, 0x29, 0x3c, 0xc1, 0xe0, 0xe1, 0x91, 0xce, 0xfb, 0x23, 0xe2, 0x4c, 0xf0, 0xd6,
    0xb4, 0xb5, 0x37, 0x3a, 0x30, 0x04, 0x4b, 0xe1, 0x0c, 0xb0, 0x33, 0x67, 0x4d, 0x63, 0x1e, 0x17,
    0xdf, 0xce, 0x09, 0x39, 0x8f, 0x23, 0x4e, 0x9d, 0x62, 0xe1, 0x18, 0xa6, 0x07, 0x7c, 0xae, 0xa0,
    0xef, 0x8b, 0xf6, 0x7d, 0x7d, 0x72, 0x3d, 0xb7, 0x0f, 0xec, 0xf2, 0x09, 0x8f, 0xa0, 0x41, 0x31,
    0x7b, 0x7b, 0xe9, 0xfd, 0xbb, 0x68, 0xb0, 0xf2, 0x5f, 0x5c, 0x47, 0x9d, 0x68, 0xbd, 0x91, 0x7f,
    0xc6, 0xf1, 0x87, 0xc5, 0xbf, 0x7a, 0x58, 0x91, 0x02, 0x31, 0x92, 0x1f, 0xc4, 0x35, 0x65, 0x23,
    0x24, 0x66, 0x32, 0x5c, 0x03, 0x92, 0x12, 0x36, 0x2b, 0x6d, 0x12, 0x03, 0xcc, 0xae, 0xdf, 0x83,
    0x1d, 0xc7, 0xf9, 0x06, 0x0d, 0xca, 0xaf, 0xfa, 0x02, 0x62, 0x40, 0x42, 0x17, 0x1f, 0x5f, 0x0e,
    0x78, 0x0b, 0x9f, 0x74, 0xcf, 0xa8, 0x8a, 0x14, 0x7f, 0x3f, 0x1c, 0x08, 0x2f, 0x9c, 0xa8, 0x63,
    0x8a, 0xf1, 0x78, 0x8e, 0x78, 0x99, 0xcb, 0xae, 0x0c, 0x76, 0x5d, 0xe9, 0xdf, 0x4c, 0xfa, 0x54,
    0x87, 0xf3, 0x60, 0xe2, 0x9e, 0x99, 0x34, 0x3e, 0x91, 0x81, 0x1b, 0xae, 0xc3, 0x31, 0xc4, 0x68,
    0x09, 0x85, 0xe6, 0x08, 0xca, 0x5d, 0x40, 0x8e, 0x21, 0x72, 0x5c, 0x6a, 0xa1, 0xb6, 0x1d, 0x5a,
    0x8b, 0x48, 0xd7, 0x5f, 0x4a, 0xaa, 0x9a, 0x3c, 0xbe, 0x88, 0xd3, 0xe0, 0xf1, 0xa5, 0x43, 0x19,
    0x08, 0x1f, 0x77, 0xc7, 0x2c, 0x8f, 0x52, 0x54, 0x74, 0x40, 0xe2, 0x01, 0x00,
];

pub const PROFILE_KEY_CREDENTIAL_PRESENTATION_V1_RESULT: [u8;
    zkgroup::PROFILE_KEY_CREDENTIAL_PRESENTATION_V1_LEN] = [
    0x00, 0xc4, 0xd1, 0x9b, 0xca, 0x1a, 0xe8, 0x44, 0x58, 0x51, 0x68, 0x86, 0x9d, 0xa4, 0x13, 0x3e,
    0x0e, 0x0b, 0xb5, 0x9f, 0x2c, 0xe1, 0x7b, 0x7a, 0xc6, 0x5b, 0xff, 0x5d, 0xa9, 0x61, 0x0e, 0xca,
    0x10, 0x34, 0x29, 0xd8, 0x02, 0x2a, 0x94, 0xba, 0xe2, 0xb5, 0xb1, 0x05, 0x7b, 0x55, 0x95, 0xb8,
    0xad, 0x70, 0xbf, 0xc2, 0xd0, 0xe1, 0xad, 0x66, 0x2c, 0xb7, 0x5e, 0x6b, 0xae, 0x07, 0x82, 0xbe,
    0x6f, 0x00, 0xe3, 0xdb, 0x79, 0x3b, 0xc2, 0x85, 0x61, 0xf0, 0x19, 0x6c, 0x2e, 0x74, 0xda, 0x6f,
    0x30, 0x3f, 0xa8, 0xbc, 0xb7, 0x0c, 0x94, 0x09, 0x66, 0x71, 0xb7, 0x3f, 0x7b, 0x3a, 0x95, 0xfb,
    0x00, 0x22, 0x00, 0xd5, 0xb9, 0x18, 0x0f, 0xa0, 0xef, 0x7d, 0x30, 0x14, 0xd0, 0x13, 0x44, 0x14,
    0x5b, 0x4d, 0x38, 0x48, 0x0d, 0x72, 0xff, 0x25, 0xc2, 0x42, 0x94, 0xe3, 0x05, 0xe5, 0x70, 0x50,
    0x72, 0xe0, 0xd3, 0x2c, 0xc4, 0xe8, 0x4f, 0x5c, 0xaf, 0x31, 0x48, 0x60, 0x89, 0xa4, 0xb9, 0x34,
    0xc8, 0x0c, 0x92, 0xeb, 0xa4, 0x34, 0x72, 0xff, 0x23, 0xa5, 0xaf, 0x93, 0xc3, 0x97, 0x53, 0x5d,
    0x33, 0x80, 0x1f, 0x0e, 0x6f, 0xc6, 0xeb, 0x2e, 0xe0, 0xd1, 0x17, 0xf0, 0x3b, 0xb4, 0xfd, 0x38,
    0xa8, 0xb9, 0xc8, 0x8d, 0x94, 0x70, 0x81, 0x31, 0xf3, 0x87, 0x42, 0xca, 0x80, 0x4a, 0x3c, 0xfc,
    0x4f, 0x94, 0x76, 0xbc, 0x2d, 0x03, 0xf5, 0x3d, 0x17, 0x00, 0x1c, 0x36, 0x47, 0x8a, 0xfb, 0xe9,
    0xcc, 0x53, 0x5a, 0x22, 0x4b, 0x2d, 0xf6, 0xb2, 0xb0, 0x8b, 0xef, 0x06, 0xcb, 0xc7, 0xd4, 0xdc,
    0x42, 0xcc, 0xfc, 0x34, 0x59, 0xf7, 0xac, 0x5c, 0x44, 0x19, 0xae, 0x9f, 0x3c, 0x8a, 0x16, 0x1d,
    0x55, 0x4d, 0x04, 0x77, 0x78, 0x94, 0x32, 0x16, 0x24, 0x08, 0x58, 0xda, 0x3b, 0x11, 0x01, 0x98,
    0x4c, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7a, 0x01, 0xee, 0xa6, 0xb2, 0xad, 0xad,
    0x14, 0xd7, 0x1a, 0xb8, 0xb8, 0xe4, 0x11, 0xbe, 0xf3, 0xc5, 0x96, 0xe9, 0x54, 0xb7, 0x0e, 0x40,
    0x31, 0x57, 0x0c, 0xb1, 0xab, 0xd7, 0xe9, 0x32, 0x08, 0x32, 0x41, 0xf1, 0xca, 0xca, 0x31, 0x16,
    0x70, 0x8f, 0xa4, 0x31, 0x9f, 0xbb, 0xdf, 0xe3, 0x51, 0x37, 0x6c, 0x23, 0x64, 0x4a, 0xe0, 0x9a,
    0x42, 0xf0, 0x15, 0x5d, 0xb4, 0x99, 0x6c, 0x9d, 0x0c, 0x7f, 0xfc, 0x85, 0x21, 0xc1, 0x91, 0x4c,
    0x0e, 0x1a, 0x20, 0xae, 0x51, 0xe6, 0x5d, 0xf6, 0x4d, 0xd5, 0xe6, 0xe5, 0x98, 0x5b, 0x3d, 0x9d,
    0x31, 0x73, 0x20, 0x46, 0xd2, 0xd7, 0x7f, 0x9c, 0x08, 0xaa, 0xcc, 0xf0, 0x56, 0xb8, 0x40, 0x26,
    0x07, 0x39, 0x76, 0xee, 0xc6, 0x16, 0x4c, 0xbd, 0xae, 0xe5, 0xd9, 0xe7, 0x6e, 0x49, 0x7f, 0x0c,
    0x29, 0x0a, 0xf6, 0x81, 0xca, 0xbd, 0x5c, 0x51, 0x01, 0x28, 0x2a, 0xbb, 0x26, 0xc3, 0x68, 0x0d,
    0x60, 0x87, 0xce, 0x05, 0x33, 0x10, 0xfe, 0x8a, 0x94, 0xf5, 0x9d, 0x8a, 0xe2, 0x3c, 0xaa, 0xc5,
    0xfc, 0x0e, 0xd0, 0xc3, 0x79, 0x88, 0x8a, 0xbf, 0x02, 0x8a, 0x6f, 0x29, 0xf8, 0x9d, 0x4f, 0xe2,
    0xac, 0xc1, 0x70, 0x63, 0x41, 0xb2, 0x24, 0x5b, 0xa1, 0x88, 0x5b, 0xca, 0x57, 0xe1, 0xe2, 0x7c,
    0xcf, 0x7e, 0xd7, 0x93, 0x71, 0x50, 0x09, 0x65, 0x00, 0x9f, 0x96, 0x0c, 0x2b, 0xa0, 0x0f, 0xad,
    0x3e, 0x93, 0x38, 0x3b, 0x87, 0xce, 0x11, 0x9c, 0xac, 0x0b, 0x33, 0x60, 0xeb, 0x99, 0x28, 0x4c,
    0xe7, 0x8e, 0x2c, 0xbe, 0xd6, 0x80, 0xf7, 0x96, 0x03, 0x73, 0xe0, 0xab, 0x75, 0xc1, 0x90, 0x25,
    0x41, 0x60, 0xc2, 0x35, 0x36, 0x14, 0x10, 0x94, 0x89, 0xe6, 0x53, 0xc9, 0xb2, 0xe1, 0xc9, 0x3f,
    0x92, 0xc7, 0xc5, 0xad, 0x58, 0x3d, 0x98, 0x7a, 0x04, 0xbd, 0x35, 0x41, 0xb2, 0x44, 0x85, 0xc3,
    0x3e, 0xa4, 0x9b, 0xac, 0x43, 0xc8, 0x7c, 0x4a, 0xb3, 0xef, 0xde, 0x2e, 0x2d, 0x7e, 0xc1, 0x0a,
    0x40, 0xbe, 0x54, 0x41, 0x99, 0xf9, 0x25, 0xb2, 0x0b, 0x2c, 0x55, 0x54, 0x2b, 0xc5, 0x64, 0x10,
    0x57, 0x1e, 0x41, 0xcd, 0x8e, 0x02, 0x86, 0xf6, 0x09, 0xa6, 0x67, 0x68, 0xb5, 0x06, 0x1c, 0xcb,
    0x47, 0x77, 0xaf, 0x32, 0x30, 0x99, 0x28, 0xdd, 0x09, 0x76, 0x5d, 0xe9, 0xdf, 0x4c, 0xfa, 0x54,
    0x87, 0xf3, 0x60, 0xe2, 0x9e, 0x99, 0x34, 0x3e, 0x91, 0x81, 0x1b, 0xae, 0xc3, 0x31, 0xc4, 0x68,
    0x09, 0x85, 0xe6, 0x08, 0xca, 0x5d, 0x40, 0x8e, 0x21, 0x72, 0x5c, 0x6a, 0xa1, 0xb6, 0x1d, 0x5a,
    0x8b, 0x48, 0xd7, 0x5f, 0x4a, 0xaa, 0x9a, 0x3c, 0xbe, 0x88, 0xd3, 0xe0, 0xf1, 0xa5, 0x43, 0x19,
    0x08, 0x1f, 0x77, 0xc7, 0x2c, 0x8f, 0x52, 0x54, 0x74, 0x48, 0xc0, 0x3a, 0xb4, 0xaf, 0xbf, 0x6b,
    0x8f, 0xb0, 0xe1, 0x26, 0xc0, 0x37, 0xa0, 0xad, 0x40, 0x94, 0x60, 0x0d, 0xd0, 0xe0, 0x63, 0x4d,
    0x76, 0xf8, 0x8c, 0x21, 0x08, 0x7f, 0x3c, 0xfb, 0x48, 0x5a, 0x89, 0xbc, 0x1e, 0x3a, 0xbc, 0x4c,
    0x95, 0x04, 0x1d, 0x1d, 0x17, 0x0e, 0xcc, 0xf0, 0x29, 0x33, 0xec, 0x53, 0x93, 0xd4, 0xbe, 0x1d,
    0xc5, 0x73, 0xf8, 0x3c, 0x33, 0xd3, 0xb9, 0xa7, 0x46,
];

pub const PROFILE_KEY_CREDENTIAL_PRESENTATION_V2_RESULT: [u8;
    zkgroup::PROFILE_KEY_CREDENTIAL_PRESENTATION_V2_LEN] = [
    0x01, 0xe0, 0xf4, 0x9c, 0xef, 0x4f, 0x25, 0xc3, 0x1d, 0x1b, 0xfd, 0xc4, 0xa3, 0x28, 0xfd, 0x50,
    0x8d, 0x22, 0x22, 0xb6, 0xde, 0xce, 0xe2, 0xa2, 0x53, 0xcf, 0x71, 0xe8, 0x82, 0x1e, 0x97, 0xcc,
    0x3f, 0x86, 0x82, 0x4f, 0x79, 0xb1, 0x88, 0x4b, 0x43, 0xc6, 0x7f, 0x85, 0x47, 0x17, 0xb1, 0xa4,
    0x7f, 0x56, 0xc8, 0xff, 0x50, 0xa1, 0xc0, 0x7f, 0xdd, 0xbf, 0x4f, 0x6e, 0x85, 0x70, 0x27, 0xd5,
    0x48, 0x58, 0x3b, 0x54, 0x07, 0x9d, 0xd6, 0x1d, 0x54, 0xcd, 0xd3, 0x9c, 0xd4, 0xac, 0xae, 0x5f,
    0x8b, 0x3b, 0xbf, 0xa2, 0xbb, 0x6b, 0x35, 0x02, 0xb6, 0x9b, 0x36, 0xda, 0x77, 0xad, 0xdd, 0xdc,
    0x14, 0x5e, 0xf2, 0x54, 0xa1, 0x6f, 0x2b, 0xae, 0xc1, 0xe3, 0xd7, 0xe8, 0xdc, 0x80, 0x73, 0x0b,
    0xc6, 0x08, 0xfc, 0xd0, 0xe4, 0xd8, 0xcf, 0xef, 0x33, 0x30, 0xa4, 0x96, 0x38, 0x0c, 0x7a, 0xc6,
    0x48, 0x68, 0x6b, 0x9c, 0x5b, 0x91, 0x4d, 0x0a, 0x77, 0xee, 0x84, 0x84, 0x8a, 0xa9, 0x70, 0xb2,
    0x40, 0x44, 0x50, 0x17, 0x9b, 0x40, 0x22, 0xee, 0xf0, 0x03, 0x38, 0x7f, 0x6b, 0xdb, 0xcb, 0xa3,
    0x03, 0x44, 0xca, 0xdf, 0xd5, 0xe3, 0xf1, 0x67, 0x7c, 0xaa, 0x2c, 0x78, 0x5f, 0x4f, 0xef, 0xe0,
    0x42, 0xa1, 0xb2, 0xad, 0xf4, 0xf4, 0xb8, 0xfa, 0x60, 0x23, 0xe4, 0x1d, 0x70, 0x4b, 0xda, 0x90,
    0x1d, 0x3a, 0x69, 0x79, 0x04, 0x77, 0x0a, 0xc4, 0x6e, 0x0e, 0x30, 0x4c, 0xf1, 0x9f, 0x91, 0xce,
    0x9a, 0xb0, 0xed, 0x1c, 0xca, 0xd8, 0xa6, 0xfe, 0xbd, 0x72, 0x31, 0x34, 0x55, 0xf1, 0x39, 0xb9,
    0x22, 0x2e, 0x9a, 0x30, 0xa2, 0x26, 0x5c, 0x6c, 0xd2, 0x2e, 0xe5, 0xb9, 0x07, 0xfc, 0x95, 0x96,
    0x74, 0x17, 0xa0, 0xd8, 0xca, 0x33, 0x8a, 0x5e, 0xe4, 0xd5, 0x1b, 0xba, 0x78, 0x03, 0x9c, 0x31,
    0x4e, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x9d, 0x54, 0x77, 0x2b, 0x81, 0x37,
    0xe5, 0x70, 0x15, 0x7c, 0x06, 0x8a, 0x5c, 0xfe, 0xbb, 0x46, 0x4b, 0x6c, 0x11, 0x33, 0xc7, 0x2d,
    0x9a, 0xbf, 0xda, 0x72, 0xdb, 0x42, 0x1c, 0xd0, 0x05, 0x61, 0xac, 0x4e, 0xec, 0xb9, 0x43, 0x13,
    0xc6, 0x91, 0x20, 0x13, 0xe3, 0x2c, 0x32, 0x2e, 0xa3, 0x67, 0x43, 0xb0, 0x18, 0x14, 0xfe, 0x91,
    0x9c, 0xa8, 0x4b, 0x9a, 0xea, 0x9c, 0x78, 0xb1, 0x0b, 0xa0, 0x21, 0x50, 0x6f, 0x7a, 0xd8, 0xc6,
    0x62, 0x5e, 0x87, 0xe0, 0x7c, 0xe3, 0x2b, 0x55, 0x90, 0x36, 0xaf, 0x6b, 0x67, 0xe2, 0xc0, 0x38,
    0x3a, 0x64, 0x3c, 0xb9, 0x3c, 0xdc, 0x2b, 0x98, 0x00, 0xe9, 0x05, 0x88, 0xa1, 0x8f, 0xcc, 0x44,
    0x9c, 0xd4, 0x66, 0xc2, 0x8c, 0x6d, 0xb7, 0x35, 0x07, 0xd8, 0x28, 0x2d, 0xd0, 0x08, 0x08, 0xb5,
    0x92, 0x7f, 0xee, 0x33, 0x36, 0xed, 0x0a, 0x22, 0x02, 0xdf, 0xb1, 0xe1, 0x76, 0xfe, 0xce, 0x6a,
    0x41, 0x04, 0xca, 0xa2, 0xa8, 0x66, 0xc4, 0x75, 0x20, 0x99, 0x67, 0x63, 0x8e, 0xa2, 0xf1, 0x46,
    0x68, 0x47, 0xda, 0x73, 0x01, 0xa7, 0x7b, 0x90, 0x07, 0xdf, 0xb3, 0x32, 0xa3, 0x0e, 0x9b, 0xbf,
    0xae, 0x8a, 0x83, 0x98, 0x16, 0x5e, 0xc9, 0xdd, 0x47, 0x78, 0x21, 0x4e, 0x0d, 0x6e, 0xd3, 0x5a,
    0x34, 0x07, 0x1b, 0xdf, 0x3b, 0x3b, 0x19, 0x51, 0x0f, 0xf2, 0xa6, 0x17, 0xbc, 0x53, 0xeb, 0x0e,
    0x6b, 0x0d, 0xdc, 0x50, 0x1d, 0xb0, 0x27, 0xbb, 0x47, 0xe4, 0xf4, 0x12, 0x7d, 0x7a, 0x01, 0x04,
    0x94, 0x5f, 0x3d, 0x3d, 0xc7, 0xec, 0x17, 0x41, 0x03, 0x8b, 0x9b, 0x80, 0xe2, 0xc7, 0xf1, 0x31,
    0xc5, 0x19, 0xee, 0x26, 0xff, 0xcb, 0x7c, 0xb9, 0xd3, 0x55, 0x6c, 0xd3, 0x5a, 0x12, 0xbe, 0xf1,
    0xd4, 0xb3, 0x76, 0xfc, 0x51, 0x31, 0x97, 0xba, 0x00, 0xce, 0x8f, 0x01, 0x2a, 0x0b, 0x37, 0x41,
    0x64, 0x22, 0x2b, 0xa7, 0x9a, 0x39, 0xe7, 0x4e, 0x15, 0x08, 0x13, 0x47, 0x4c, 0xa6, 0xf8, 0x7b,
    0xa7, 0x05, 0xc0, 0xf0, 0x6e, 0x7b, 0x70, 0x68, 0x03, 0x9c, 0x5e, 0xdd, 0x9d, 0xd1, 0xa5, 0xab,
    0x67, 0x93, 0xac, 0x21, 0x19, 0x89, 0x90, 0x76, 0x86, 0xb4, 0x56, 0x50, 0x22, 0x11, 0x87, 0xd4,
    0xd5, 0x9a, 0xe4, 0x92, 0x67, 0x9f, 0x3b, 0x43, 0x08, 0x76, 0x5d, 0xe9, 0xdf, 0x4c, 0xfa, 0x54,
    0x87, 0xf3, 0x60, 0xe2, 0x9e, 0x99, 0x34, 0x3e, 0x91, 0x81, 0x1b, 0xae, 0xc3, 0x31, 0xc4, 0x68,
    0x09, 0x85, 0xe6, 0x08, 0xca, 0x5d, 0x40, 0x8e, 0x21, 0x72, 0x5c, 0x6a, 0xa1, 0xb6, 0x1d, 0x5a,
    0x8b, 0x48, 0xd7, 0x5f, 0x4a, 0xaa, 0x9a, 0x3c, 0xbe, 0x88, 0xd3, 0xe0, 0xf1, 0xa5, 0x43, 0x19,
    0x08, 0x1f, 0x77, 0xc7, 0x2c, 0x8f, 0x52, 0x54, 0x74, 0x48, 0xc0, 0x3a, 0xb4, 0xaf, 0xbf, 0x6b,
    0x8f, 0xb0, 0xe1, 0x26, 0xc0, 0x37, 0xa0, 0xad, 0x40, 0x94, 0x60, 0x0d, 0xd0, 0xe0, 0x63, 0x4d,
    0x76, 0xf8, 0x8c, 0x21, 0x08, 0x7f, 0x3c, 0xfb, 0x48, 0x5a, 0x89, 0xbc, 0x1e, 0x3a, 0xbc, 0x4c,
    0x95, 0x04, 0x1d, 0x1d, 0x17, 0x0e, 0xcc, 0xf0, 0x29, 0x33, 0xec, 0x53, 0x93, 0xd4, 0xbe, 0x1d,
    0xc5, 0x73, 0xf8, 0x3c, 0x33, 0xd3, 0xb9, 0xa7, 0x46,
];

pub const PNI_CREDENTIAL_PRESENTATION_V1_RESULT: [u8; zkgroup::PNI_CREDENTIAL_PRESENTATION_V1_LEN] = [
    0x00, 0xfe, 0xcc, 0x5f, 0x71, 0xd4, 0x0d, 0xbd, 0x45, 0x91, 0x2d, 0x0d, 0xe9, 0xc1, 0xed, 0x03,
    0x3c, 0x7e, 0xb1, 0xc4, 0x75, 0x5e, 0x19, 0xcb, 0x62, 0x41, 0xed, 0xe6, 0xa6, 0xa9, 0x9f, 0x65,
    0x54, 0x5e, 0x87, 0x0a, 0x80, 0x68, 0x54, 0xc5, 0x00, 0x0d, 0x43, 0x6d, 0xb6, 0x01, 0xa8, 0x9f,
    0x72, 0xb9, 0xb3, 0x99, 0xf0, 0xef, 0xa2, 0x77, 0x47, 0x37, 0x16, 0xe8, 0xbc, 0x20, 0xc9, 0x84,
    0x76, 0x62, 0x50, 0x93, 0x75, 0x55, 0x60, 0x4f, 0x2d, 0x2f, 0xcd, 0xd2, 0x63, 0xc6, 0x0f, 0x2f,
    0x72, 0xb5, 0xa0, 0x4d, 0x9b, 0xbb, 0xc6, 0xf9, 0x5c, 0x78, 0x08, 0x5f, 0x81, 0xaa, 0xf0, 0x7d,
    0x33, 0x16, 0xa2, 0xdb, 0xd1, 0xef, 0x85, 0xbb, 0x64, 0x2d, 0x5d, 0xa6, 0xd0, 0x0d, 0x03, 0xfe,
    0xd8, 0x09, 0x72, 0x76, 0xbf, 0x17, 0xa1, 0x13, 0xa4, 0x40, 0x18, 0xd7, 0x73, 0xc9, 0x11, 0x6c,
    0x33, 0xac, 0x86, 0x83, 0x7d, 0x4f, 0x5c, 0x41, 0xfb, 0x70, 0x15, 0x3f, 0x3d, 0x65, 0x5c, 0x0b,
    0x68, 0x98, 0x2f, 0xae, 0x01, 0x11, 0x34, 0x60, 0xdb, 0x75, 0xea, 0x70, 0x99, 0xef, 0x7e, 0x91,
    0x0c, 0xbe, 0x0b, 0xd6, 0x06, 0x87, 0x0d, 0xf5, 0x55, 0x22, 0xf9, 0xd0, 0xb1, 0xbe, 0xe1, 0xb1,
    0xab, 0x2f, 0x3b, 0x9c, 0xd3, 0x56, 0x3a, 0x42, 0x26, 0x84, 0xeb, 0xcf, 0xdb, 0x1f, 0xda, 0xda,
    0x27, 0xac, 0xb4, 0xd4, 0x8c, 0x7d, 0xb9, 0xc6, 0xb1, 0x38, 0x9c, 0x67, 0x42, 0xa8, 0xf8, 0x25,
    0x7b, 0xb7, 0x0f, 0x54, 0x30, 0xfe, 0xb4, 0xa4, 0x38, 0x00, 0x7f, 0xb3, 0x3e, 0x79, 0x10, 0xda,
    0x3b, 0x9a, 0x09, 0x97, 0xd7, 0xd3, 0x5c, 0x6c, 0x93, 0xa8, 0xd4, 0x59, 0x49, 0xd0, 0x1f, 0x88,
    0xb4, 0x97, 0xc8, 0x22, 0xb0, 0x12, 0x7b, 0x3f, 0xc5, 0x7c, 0xfa, 0xee, 0x90, 0xbc, 0xf7, 0xd4,
    0x19, 0x14, 0xf6, 0xf0, 0xf8, 0xfa, 0x0a, 0xcd, 0x82, 0xe0, 0x04, 0xca, 0xaa, 0xd1, 0xc9, 0xfe,
    0xec, 0x2f, 0xb6, 0x7f, 0x58, 0x93, 0x6a, 0xe7, 0xa9, 0x2a, 0x28, 0x5d, 0xc1, 0x5b, 0x23, 0x48,
    0x6a, 0x02, 0x72, 0xe8, 0x64, 0xf3, 0xae, 0x97, 0x69, 0xd6, 0x50, 0xfd, 0xd0, 0x89, 0x87, 0x39,
    0xad, 0x28, 0xe2, 0x59, 0xe8, 0xda, 0xe7, 0x39, 0x07, 0xca, 0xa8, 0xff, 0x69, 0xa5, 0x3a, 0x85,
    0x1e, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf2, 0x6c, 0x70, 0x4b, 0x8d, 0xaf, 0x38,
    0xa4, 0x64, 0x81, 0x0e, 0xca, 0x85, 0x89, 0x54, 0x15, 0x21, 0xe0, 0x53, 0x22, 0x1d, 0xd8, 0x30,
    0x86, 0x6b, 0xf7, 0x7d, 0xa0, 0x25, 0xcd, 0xc2, 0x04, 0x1e, 0x33, 0xf7, 0x3e, 0x42, 0xc7, 0x03,
    0x87, 0x70, 0x9a, 0xcb, 0xac, 0x0d, 0xf4, 0x6d, 0x01, 0x55, 0xe6, 0xbf, 0x6f, 0x79, 0x52, 0xdd,
    0xc3, 0x28, 0x9a, 0x16, 0xca, 0x68, 0x2e, 0x74, 0x0d, 0xf7, 0x40, 0x3c, 0xc1, 0x2c, 0xbe, 0x0c,
    0xd5, 0x4a, 0x7b, 0x0d, 0xe0, 0x8e, 0xec, 0x4f, 0x7c, 0xdc, 0xe5, 0x29, 0x96, 0x88, 0x0e, 0xf5,
    0xdb, 0x74, 0xbc, 0xc4, 0xe8, 0xe7, 0x8d, 0x62, 0x0d, 0xa4, 0xd2, 0x1f, 0xf1, 0x37, 0xb2, 0x9d,
    0xf3, 0xa1, 0xa0, 0x8d, 0x14, 0xb9, 0x22, 0x4c, 0x91, 0xef, 0x05, 0xa1, 0xac, 0x0a, 0x7c, 0xfe,
    0x14, 0x2b, 0x22, 0x78, 0x53, 0xc9, 0x0b, 0xb9, 0x0d, 0xb0, 0xcf, 0x3d, 0x63, 0x11, 0x56, 0x0e,
    0x49, 0xca, 0x52, 0x98, 0x3f, 0x9e, 0xfc, 0x54, 0xec, 0xb6, 0x1f, 0x55, 0x2d, 0x6a, 0x85, 0x08,
    0x88, 0x71, 0xef, 0x4d, 0x0f, 0x58, 0x62, 0xdd, 0x04, 0xaf, 0xf9, 0x3f, 0xd9, 0x7b, 0x78, 0x16,
    0x18, 0x1d, 0x38, 0xbc, 0xb3, 0x0f, 0x71, 0xea, 0xeb, 0x9e, 0xff, 0x2b, 0xa6, 0x30, 0x91, 0x6e,
    0xac, 0x35, 0x5f, 0x45, 0x70, 0x3a, 0x8c, 0x78, 0x0e, 0x85, 0x79, 0xb2, 0x79, 0x3d, 0x4f, 0xb7,
    0x2e, 0x00, 0x1d, 0x15, 0xe2, 0x3b, 0xed, 0xcb, 0x3c, 0x82, 0x7f, 0xc5, 0x59, 0xef, 0x7a, 0xdb,
    0x6d, 0xa2, 0xec, 0x33, 0x29, 0x1b, 0x86, 0xbf, 0x0d, 0xb2, 0xad, 0x4a, 0x3a, 0x0c, 0xb9, 0x23,
    0x3d, 0x3a, 0xf9, 0x67, 0xd9, 0x30, 0x15, 0x05, 0xb8, 0x8d, 0x15, 0x7b, 0x34, 0x36, 0xae, 0x61,
    0x22, 0x69, 0x67, 0x18, 0xd8, 0x12, 0xb2, 0x70, 0x02, 0xcd, 0xce, 0x4c, 0x80, 0x76, 0x10, 0xf2,
    0xde, 0x7c, 0xec, 0x4a, 0x03, 0x93, 0x3d, 0xa6, 0x4a, 0x63, 0x19, 0xea, 0xb4, 0xac, 0x06, 0x30,
    0xc9, 0x9d, 0x0e, 0x62, 0x77, 0x99, 0x74, 0xe8, 0x03, 0x8f, 0xf5, 0x05, 0x32, 0x75, 0x37, 0x8c,
    0x1b, 0x41, 0xdd, 0x7b, 0xb5, 0xf8, 0xf4, 0xc1, 0x1d, 0xaa, 0x4c, 0xd1, 0x9f, 0xde, 0xc4, 0xd0,
    0x22, 0x28, 0x50, 0xc6, 0x06, 0x85, 0x7c, 0x99, 0x0e, 0x76, 0x5d, 0xe9, 0xdf, 0x4c, 0xfa, 0x54,
    0x87, 0xf3, 0x60, 0xe2, 0x9e, 0x99, 0x34, 0x3e, 0x91, 0x81, 0x1b, 0xae, 0xc3, 0x31, 0xc4, 0x68,
    0x09, 0x85, 0xe6, 0x08, 0xca, 0x5d, 0x40, 0x8e, 0x21, 0x72, 0x5c, 0x6a, 0xa1, 0xb6, 0x1d, 0x5a,
    0x8b, 0x48, 0xd7, 0x5f, 0x4a, 0xaa, 0x9a, 0x3c, 0xbe, 0x88, 0xd3, 0xe0, 0xf1, 0xa5, 0x43, 0x19,
    0x08, 0x1f, 0x77, 0xc7, 0x2c, 0x8f, 0x52, 0x54, 0x74, 0xfe, 0x74, 0x40, 0x90, 0x60, 0x61, 0x56,
    0x79, 0xfc, 0x11, 0x54, 0x73, 0x68, 0x3d, 0x63, 0xab, 0xd9, 0xce, 0xd4, 0x6c, 0x7f, 0x2a, 0xd7,
    0x36, 0x04, 0x6d, 0xe5, 0xa2, 0xc7, 0xd2, 0x52, 0x2f, 0x12, 0x28, 0x95, 0x59, 0x70, 0x49, 0xcf,
    0xd7, 0xcc, 0x5b, 0xeb, 0x6d, 0xc7, 0x2a, 0xa9, 0x90, 0xae, 0x9a, 0x62, 0xec, 0x8e, 0x25, 0x6a,
    0x1c, 0xbf, 0x5f, 0x3f, 0x28, 0x42, 0x33, 0xbb, 0x07, 0x48, 0xc0, 0x3a, 0xb4, 0xaf, 0xbf, 0x6b,
    0x8f, 0xb0, 0xe1, 0x26, 0xc0, 0x37, 0xa0, 0xad, 0x40, 0x94, 0x60, 0x0d, 0xd0, 0xe0, 0x63, 0x4d,
    0x76, 0xf8, 0x8c, 0x21, 0x08, 0x7f, 0x3c, 0xfb, 0x48, 0x5a, 0x89, 0xbc, 0x1e, 0x3a, 0xbc, 0x4c,
    0x95, 0x04, 0x1d, 0x1d, 0x17, 0x0e, 0xcc, 0xf0, 0x29, 0x33, 0xec, 0x53, 0x93, 0xd4, 0xbe, 0x1d,
    0xc5, 0x73, 0xf8, 0x3c, 0x33, 0xd3, 0xb9, 0xa7, 0x46,
];

pub const PNI_CREDENTIAL_PRESENTATION_V2_RESULT: [u8; zkgroup::PNI_CREDENTIAL_PRESENTATION_V2_LEN] = [
    0x01, 0xf8, 0x87, 0xf4, 0x03, 0xdb, 0x1a, 0x80, 0xfa, 0x04, 0x04, 0x34, 0x13, 0x23, 0x3f, 0x56,
    0xbf, 0x6c, 0x53, 0xbb, 0x07, 0x8c, 0x16, 0xd2, 0x4d, 0xf9, 0x3a, 0x21, 0x9d, 0x77, 0x85, 0x69,
    0x68, 0x56, 0xd8, 0xf1, 0x97, 0xa0, 0x1c, 0x6e, 0x22, 0x3d, 0x4a, 0xce, 0xed, 0x1d, 0x60, 0xb9,
    0x0b, 0x71, 0x3f, 0x45, 0x56, 0xab, 0x39, 0x40, 0x3b, 0x84, 0xc5, 0x1d, 0x72, 0x4c, 0xa9, 0xaa,
    0x44, 0x88, 0x6d, 0x73, 0xbe, 0x15, 0xfc, 0xeb, 0xc9, 0x33, 0xf8, 0x35, 0xfc, 0x0f, 0x32, 0x10,
    0xf8, 0xd7, 0xb8, 0xfa, 0x79, 0x40, 0xbf, 0x90, 0x69, 0xd5, 0x0d, 0xc4, 0xba, 0x83, 0xda, 0x8a,
    0x0e, 0xd8, 0x6d, 0x6c, 0x33, 0xcd, 0x99, 0xa2, 0x5f, 0xe4, 0x69, 0x06, 0xd6, 0x55, 0xa7, 0xfe,
    0xc5, 0xfe, 0xe5, 0x00, 0x52, 0x7a, 0x56, 0xea, 0x56, 0x89, 0xd1, 0x76, 0x53, 0x96, 0x90, 0x7b,
    0x15, 0x3a, 0x86, 0xe4, 0x0e, 0xb2, 0x7b, 0x81, 0x20, 0x66, 0x1d, 0xfe, 0x59, 0xbb, 0x17, 0xaf,
    0x10, 0x24, 0xeb, 0xd6, 0x97, 0xc2, 0xc3, 0x6c, 0x46, 0xf3, 0xa8, 0x5f, 0x8d, 0xc6, 0xf9, 0x27,
    0x61, 0xb2, 0x9c, 0x84, 0x25, 0x68, 0x47, 0xb5, 0xf4, 0x20, 0x38, 0x6a, 0xc4, 0x1d, 0x6d, 0x81,
    0xf8, 0xe6, 0x5a, 0x19, 0x5f, 0x2a, 0xb7, 0x00, 0x3c, 0x0f, 0xc2, 0x2f, 0xd9, 0x69, 0x87, 0x0e,
    0x2c, 0x5c, 0x4a, 0xd4, 0xa9, 0xde, 0x38, 0xa8, 0xbd, 0xe7, 0x35, 0x09, 0xc4, 0x1e, 0x85, 0xac,
    0xce, 0xf5, 0x9d, 0xb6, 0x99, 0x30, 0x97, 0x2b, 0x1c, 0x3f, 0xcb, 0x9c, 0x9a, 0xbd, 0x4c, 0x88,
    0x4a, 0x3e, 0x91, 0xb4, 0xc2, 0x5b, 0x8f, 0xde, 0x3b, 0x5c, 0xac, 0x7c, 0x55, 0x44, 0x2f, 0x99,
    0x6b, 0x3f, 0xd3, 0x71, 0x21, 0x10, 0xc7, 0xdd, 0x71, 0xc8, 0x47, 0xbe, 0x55, 0x21, 0x22, 0xb9,
    0x47, 0x40, 0x21, 0x36, 0xb1, 0xc1, 0x6f, 0xe1, 0x8a, 0xcb, 0xa2, 0xe6, 0xa2, 0x77, 0xdc, 0x57,
    0x17, 0x2a, 0xc7, 0x9d, 0x18, 0x92, 0x46, 0x06, 0x0d, 0x50, 0xdb, 0x1a, 0x7d, 0xc5, 0x31, 0xd0,
    0x75, 0xec, 0x94, 0x14, 0xf8, 0x6e, 0x31, 0xa1, 0xb0, 0x40, 0x6c, 0xe1, 0x73, 0xb0, 0x9c, 0x1e,
    0xab, 0xbe, 0xf2, 0xde, 0x11, 0x77, 0x49, 0xb3, 0xc5, 0x12, 0x49, 0x9d, 0x5f, 0x91, 0xe4, 0x69,
    0x4e, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x9c, 0x0c, 0x6c, 0x31, 0x0e, 0xd2,
    0xb8, 0xf4, 0xa1, 0xd1, 0xe6, 0xb8, 0x53, 0xd8, 0x3f, 0x5d, 0xa8, 0x13, 0x6e, 0x36, 0x60, 0x5f,
    0xd6, 0x31, 0x97, 0x9c, 0xc6, 0x18, 0xd0, 0xe1, 0x02, 0xcc, 0x82, 0xe9, 0x05, 0x6d, 0x20, 0x31,
    0x37, 0x9d, 0xe3, 0xe5, 0x7c, 0x04, 0x53, 0x0b, 0x20, 0x61, 0x7d, 0x0b, 0x24, 0x18, 0xb8, 0x95,
    0x0c, 0x8a, 0x23, 0x94, 0x35, 0x5c, 0x6d, 0x40, 0x0f, 0x0e, 0x4f, 0x69, 0xb7, 0x59, 0x42, 0x03,
    0x20, 0x67, 0x38, 0x2a, 0xe2, 0x44, 0x87, 0x0f, 0x58, 0x59, 0xa3, 0x57, 0x82, 0xcb, 0x81, 0xb1,
    0x10, 0x6c, 0x5a, 0xae, 0x58, 0xdf, 0x1f, 0x11, 0x0d, 0xbf, 0x76, 0x1c, 0x3a, 0x52, 0xad, 0x5e,
    0x3a, 0x87, 0x2f, 0x38, 0x5c, 0x30, 0x56, 0xbf, 0x2b, 0xe3, 0xd6, 0x78, 0x26, 0xcf, 0x33, 0xbc,
    0x74, 0x3c, 0x1c, 0x25, 0xee, 0xd0, 0xed, 0xa2, 0x0f, 0x21, 0xde, 0x77, 0x39, 0x06, 0x65, 0x7b,
    0x26, 0xe0, 0x9c, 0xf3, 0x88, 0xda, 0x23, 0x33, 0xdb, 0x60, 0xf7, 0x68, 0x86, 0x5e, 0x24, 0x05,
    0xf4, 0xdf, 0x4f, 0x48, 0xb6, 0x40, 0x29, 0x5e, 0x02, 0x76, 0x25, 0x67, 0x8a, 0x81, 0x0d, 0xbf,
    0x81, 0x11, 0x91, 0x8f, 0x7b, 0x12, 0x7f, 0xd9, 0xfb, 0x0b, 0x33, 0x25, 0x31, 0xec, 0x52, 0x06,
    0x9b, 0x98, 0xab, 0xf9, 0x5b, 0xb4, 0xae, 0x73, 0x07, 0xd9, 0x6b, 0x9d, 0x50, 0xb6, 0xe7, 0x34,
    0xff, 0x8a, 0xf9, 0x2d, 0x2c, 0x84, 0x17, 0x91, 0x97, 0x95, 0xa4, 0x6b, 0x97, 0xdf, 0x7a, 0x69,
    0x2d, 0xf4, 0xea, 0x9b, 0x63, 0x81, 0x0e, 0xf7, 0x0d, 0xca, 0x68, 0x69, 0x3b, 0xbe, 0xc7, 0xe1,
    0xf5, 0x24, 0x09, 0x43, 0x0d, 0xa6, 0x1c, 0xac, 0x92, 0x49, 0xca, 0x02, 0x21, 0x6a, 0x77, 0xb1,
    0xf0, 0x8e, 0x59, 0x51, 0xa5, 0x07, 0x83, 0xca, 0x08, 0x8f, 0xa5, 0x99, 0x2b, 0x5e, 0xca, 0xf1,
    0x41, 0x3d, 0xfe, 0x45, 0xf9, 0xef, 0x23, 0xb3, 0xc1, 0x20, 0x99, 0x41, 0x18, 0xb3, 0x25, 0x76,
    0x3d, 0x66, 0xe6, 0x0c, 0x96, 0x47, 0xcc, 0x38, 0x02, 0x48, 0xa9, 0xda, 0x79, 0xe4, 0x6c, 0x17,
    0xb6, 0xbb, 0x03, 0xa2, 0x3c, 0x39, 0x87, 0xce, 0xa8, 0x6a, 0xc1, 0x58, 0xd4, 0x5b, 0x78, 0xf1,
    0xf9, 0xb9, 0x23, 0x47, 0x25, 0x21, 0xec, 0xb3, 0x0e, 0x76, 0x5d, 0xe9, 0xdf, 0x4c, 0xfa, 0x54,
    0x87, 0xf3, 0x60, 0xe2, 0x9e, 0x99, 0x34, 0x3e, 0x91, 0x81, 0x1b, 0xae, 0xc3, 0x31, 0xc4, 0x68,
    0x09, 0x85, 0xe6, 0x08, 0xca, 0x5d, 0x40, 0x8e, 0x21, 0x72, 0x5c, 0x6a, 0xa1, 0xb6, 0x1d, 0x5a,
    0x8b, 0x48, 0xd7, 0x5f, 0x4a, 0xaa, 0x9a, 0x3c, 0xbe, 0x88, 0xd3, 0xe0, 0xf1, 0xa5, 0x43, 0x19,
    0x08, 0x1f, 0x77, 0xc7, 0x2c, 0x8f, 0x52, 0x54, 0x74, 0xfe, 0x74, 0x40, 0x90, 0x60, 0x61, 0x56,
    0x79, 0xfc, 0x11, 0x54, 0x73, 0x68, 0x3d, 0x63, 0xab, 0xd9, 0xce, 0xd4, 0x6c, 0x7f, 0x2a, 0xd7,
    0x36, 0x04, 0x6d, 0xe5, 0xa2, 0xc7, 0xd2, 0x52, 0x2f, 0x12, 0x28, 0x95, 0x59, 0x70, 0x49, 0xcf,
    0xd7, 0xcc, 0x5b, 0xeb, 0x6d, 0xc7, 0x2a, 0xa9, 0x90, 0xae, 0x9a, 0x62, 0xec, 0x8e, 0x25, 0x6a,
    0x1c, 0xbf, 0x5f, 0x3f, 0x28, 0x42, 0x33, 0xbb, 0x07, 0x48, 0xc0, 0x3a, 0xb4, 0xaf, 0xbf, 0x6b,
    0x8f, 0xb0, 0xe1, 0x26, 0xc0, 0x37, 0xa0, 0xad, 0x40, 0x94, 0x60, 0x0d, 0xd0, 0xe0, 0x63, 0x4d,
    0x76, 0xf8, 0x8c, 0x21, 0x08, 0x7f, 0x3c, 0xfb, 0x48, 0x5a, 0x89, 0xbc, 0x1e, 0x3a, 0xbc, 0x4c,
    0x95, 0x04, 0x1d, 0x1d, 0x17, 0x0e, 0xcc, 0xf0, 0x29, 0x33, 0xec, 0x53, 0x93, 0xd4, 0xbe, 0x1d,
    0xc5, 0x73, 0xf8, 0x3c, 0x33, 0xd3, 0xb9, 0xa7, 0x46,
];

#[test]
fn test_integration_auth() {
    let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32);
    let server_public_params = server_secret_params.get_public_params();

    let master_key = zkgroup::groups::GroupMasterKey::new(zkgroup::TEST_ARRAY_32_1);
    let group_secret_params =
        zkgroup::groups::GroupSecretParams::derive_from_master_key(master_key);
    let group_public_params = group_secret_params.get_public_params();

    // Random UID and issueTime
    let uid = zkgroup::TEST_ARRAY_16;
    let redemption_time = 123456u32;

    // SERVER
    // Issue credential
    let randomness = zkgroup::TEST_ARRAY_32_2;
    let auth_credential_response =
        server_secret_params.issue_auth_credential(randomness, uid, redemption_time);

    // CLIENT
    let auth_credential = server_public_params
        .receive_auth_credential(uid, redemption_time, &auth_credential_response)
        .unwrap();

    // Create and decrypt user entry
    let uuid_ciphertext = group_secret_params.encrypt_uuid(uid);
    let plaintext = group_secret_params.decrypt_uuid(uuid_ciphertext).unwrap();
    assert!(plaintext == uid);

    // Create and receive presentation
    let randomness = zkgroup::TEST_ARRAY_32_5;

    let presentation_v1 = server_public_params.create_auth_credential_presentation_v1(
        randomness,
        group_secret_params,
        auth_credential,
    );

    let presentation_v2 = server_public_params.create_auth_credential_presentation_v2(
        randomness,
        group_secret_params,
        auth_credential,
    );

    let presentation_any = server_public_params.create_auth_credential_presentation(
        randomness,
        group_secret_params,
        auth_credential,
    );

    let presentation_v1_bytes = &bincode::serialize(&presentation_v1).unwrap();
    let presentation_v2_bytes = &bincode::serialize(&presentation_v2).unwrap();
    let presentation_any_bytes = &bincode::serialize(&presentation_any).unwrap();

    //for b in presentation_bytes.iter() {
    //    print!("0x{:02x}, ", b);
    //}

    assert!(AUTH_CREDENTIAL_PRESENTATION_V1_RESULT[..] == presentation_v1_bytes[..]);
    assert!(AUTH_CREDENTIAL_PRESENTATION_V2_RESULT[..] == presentation_v2_bytes[..]);
    assert!(AUTH_CREDENTIAL_PRESENTATION_V2_RESULT[..] == presentation_any_bytes[..]);

    let presentation_v1_parsed =
        zkgroup::auth::AnyAuthCredentialPresentation::new(presentation_v1_bytes).unwrap();
    let presentation_v2_parsed =
        zkgroup::auth::AnyAuthCredentialPresentation::new(presentation_v2_bytes).unwrap();

    server_secret_params
        .verify_auth_credential_presentation(group_public_params, &presentation_v1_parsed)
        .unwrap();

    server_secret_params
        .verify_auth_credential_presentation(group_public_params, &presentation_v2_parsed)
        .unwrap();

    server_secret_params
        .verify_auth_credential_presentation_v1(group_public_params, &presentation_v1)
        .unwrap();

    server_secret_params
        .verify_auth_credential_presentation_v2(group_public_params, &presentation_v2)
        .unwrap();

    // test encoding
    // these tests will also discover if the serialized sizes change,
    //   necessitating an update to the LEN constants
    //let mut ccm_bytes = [0u8; zkgroup::common::constants::CLIENT_CREDENTIAL_MANAGER_LEN];
    let mut group_secret_params_bytes = [0u8; zkgroup::common::constants::GROUP_SECRET_PARAMS_LEN];
    let mut server_secret_params_bytes =
        [0u8; zkgroup::common::constants::SERVER_SECRET_PARAMS_LEN];
    let mut group_public_params_bytes = [0u8; zkgroup::common::constants::GROUP_PUBLIC_PARAMS_LEN];
    let mut server_public_params_bytes =
        [0u8; zkgroup::common::constants::SERVER_PUBLIC_PARAMS_LEN];
    let mut auth_credential_response_bytes =
        [0u8; zkgroup::common::constants::AUTH_CREDENTIAL_RESPONSE_LEN];
    let mut auth_credential_bytes = [0u8; zkgroup::common::constants::AUTH_CREDENTIAL_LEN];
    let mut auth_credential_presentation_v1_bytes =
        [0u8; zkgroup::common::constants::AUTH_CREDENTIAL_PRESENTATION_V1_LEN];
    let mut auth_credential_presentation_v2_bytes =
        [0u8; zkgroup::common::constants::AUTH_CREDENTIAL_PRESENTATION_V2_LEN];
    let mut uuid_ciphertext_bytes = [0u8; zkgroup::common::constants::UUID_CIPHERTEXT_LEN];
    let mut uid_bytes = [0u8; zkgroup::common::constants::UUID_LEN];
    let mut randomness_bytes = [0u8; zkgroup::common::constants::RANDOMNESS_LEN];

    //ccm_bytes.copy_from_slice(&bincode::serialize(&client_credential_manager).unwrap());
    group_secret_params_bytes.copy_from_slice(&bincode::serialize(&group_secret_params).unwrap());
    server_secret_params_bytes.copy_from_slice(&bincode::serialize(&server_secret_params).unwrap());
    group_public_params_bytes.copy_from_slice(&bincode::serialize(&group_public_params).unwrap());
    server_public_params_bytes.copy_from_slice(&bincode::serialize(&server_public_params).unwrap());
    auth_credential_response_bytes
        .copy_from_slice(&bincode::serialize(&auth_credential_response).unwrap());
    auth_credential_bytes.copy_from_slice(&bincode::serialize(&auth_credential).unwrap());
    auth_credential_presentation_v1_bytes
        .copy_from_slice(&bincode::serialize(&presentation_v1).unwrap());
    auth_credential_presentation_v2_bytes
        .copy_from_slice(&bincode::serialize(&presentation_v2).unwrap());
    uuid_ciphertext_bytes.copy_from_slice(&bincode::serialize(&uuid_ciphertext).unwrap());
    uid_bytes.copy_from_slice(&bincode::serialize(&uid).unwrap());
    randomness_bytes.copy_from_slice(&bincode::serialize(&randomness).unwrap());
}

#[test]
fn test_integration_profile() {
    // SERVER
    let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32);
    let server_public_params = server_secret_params.get_public_params();

    // CLIENT
    let master_key = zkgroup::groups::GroupMasterKey::new(zkgroup::TEST_ARRAY_32_1);
    let group_secret_params =
        zkgroup::groups::GroupSecretParams::derive_from_master_key(master_key);
    let group_public_params = group_secret_params.get_public_params();

    let uid = zkgroup::TEST_ARRAY_16;
    let profile_key =
        zkgroup::profiles::ProfileKey::create(zkgroup::common::constants::TEST_ARRAY_32_1);
    let profile_key_commitment = profile_key.get_commitment(uid);

    // Create context and request
    let randomness = zkgroup::TEST_ARRAY_32_3;

    let context = server_public_params.create_profile_key_credential_request_context(
        randomness,
        uid,
        profile_key,
    );
    let request = context.get_request();

    // SERVER

    let randomness = zkgroup::TEST_ARRAY_32_4;
    let response = server_secret_params
        .issue_profile_key_credential(randomness, &request, uid, profile_key_commitment)
        .unwrap();

    // CLIENT
    // Gets stored profile credential
    let profile_key_credential = server_public_params
        .receive_profile_key_credential(&context, &response)
        .unwrap();

    // Create encrypted UID and profile key
    let uuid_ciphertext = group_secret_params.encrypt_uuid(uid);
    let plaintext = group_secret_params.decrypt_uuid(uuid_ciphertext).unwrap();
    assert!(plaintext == uid);

    let profile_key_ciphertext = group_secret_params.encrypt_profile_key(profile_key, uid);
    let decrypted_profile_key = group_secret_params
        .decrypt_profile_key(profile_key_ciphertext, uid)
        .unwrap();

    assert!(decrypted_profile_key.get_bytes() == profile_key.get_bytes());

    // Create presentation
    let randomness = zkgroup::TEST_ARRAY_32_5;

    let presentation_v1 = server_public_params.create_profile_key_credential_presentation_v1(
        randomness,
        group_secret_params,
        profile_key_credential,
    );

    let presentation_v2 = server_public_params.create_profile_key_credential_presentation_v2(
        randomness,
        group_secret_params,
        profile_key_credential,
    );

    let presentation_any = server_public_params.create_profile_key_credential_presentation(
        randomness,
        group_secret_params,
        profile_key_credential,
    );

    let presentation_v1_bytes = &bincode::serialize(&presentation_v1).unwrap();
    let presentation_v2_bytes = &bincode::serialize(&presentation_v2).unwrap();
    let presentation_any_bytes = &bincode::serialize(&presentation_any).unwrap();

    //for b in presentation_bytes.iter() {
    //    print!("0x{:02x}, ", b);
    //}

    assert!(PROFILE_KEY_CREDENTIAL_PRESENTATION_V1_RESULT[..] == presentation_v1_bytes[..]);
    assert!(PROFILE_KEY_CREDENTIAL_PRESENTATION_V2_RESULT[..] == presentation_v2_bytes[..]);
    assert!(PROFILE_KEY_CREDENTIAL_PRESENTATION_V2_RESULT[..] == presentation_any_bytes[..]);

    let presentation_v1_parsed =
        zkgroup::profiles::AnyProfileKeyCredentialPresentation::new(presentation_v1_bytes).unwrap();
    let presentation_v2_parsed =
        zkgroup::profiles::AnyProfileKeyCredentialPresentation::new(presentation_v2_bytes).unwrap();

    server_secret_params
        .verify_profile_key_credential_presentation(group_public_params, &presentation_v1_parsed)
        .unwrap();

    server_secret_params
        .verify_profile_key_credential_presentation(group_public_params, &presentation_v2_parsed)
        .unwrap();

    server_secret_params
        .verify_profile_key_credential_presentation_v1(group_public_params, &presentation_v1)
        .unwrap();

    server_secret_params
        .verify_profile_key_credential_presentation_v2(group_public_params, &presentation_v2)
        .unwrap();

    // test encoding
    // these tests will also discover if the serialized sizes change,
    //   necessitating an update to the LEN constants

    let mut profile_key_commitment_bytes =
        [0u8; zkgroup::common::constants::PROFILE_KEY_COMMITMENT_LEN];
    let mut profile_key_credential_bytes =
        [0u8; zkgroup::common::constants::PROFILE_KEY_CREDENTIAL_LEN];
    let mut profile_key_credential_presentation_v1_bytes =
        [0u8; zkgroup::common::constants::PROFILE_KEY_CREDENTIAL_PRESENTATION_V1_LEN];
    let mut profile_key_credential_presentation_v2_bytes =
        [0u8; zkgroup::common::constants::PROFILE_KEY_CREDENTIAL_PRESENTATION_V2_LEN];
    let mut profile_key_credential_request_bytes =
        [0u8; zkgroup::common::constants::PROFILE_KEY_CREDENTIAL_REQUEST_LEN];
    let mut profile_key_credential_request_context_bytes =
        [0u8; zkgroup::common::constants::PROFILE_KEY_CREDENTIAL_REQUEST_CONTEXT_LEN];
    let mut profile_key_credential_response_bytes =
        [0u8; zkgroup::common::constants::PROFILE_KEY_CREDENTIAL_RESPONSE_LEN];

    profile_key_commitment_bytes
        .copy_from_slice(&bincode::serialize(&profile_key_commitment).unwrap());
    profile_key_credential_bytes
        .copy_from_slice(&bincode::serialize(&profile_key_credential).unwrap());
    profile_key_credential_presentation_v1_bytes
        .copy_from_slice(&bincode::serialize(&presentation_v1).unwrap());
    profile_key_credential_presentation_v2_bytes
        .copy_from_slice(&bincode::serialize(&presentation_v2).unwrap());
    profile_key_credential_request_bytes.copy_from_slice(&bincode::serialize(&request).unwrap());
    profile_key_credential_request_context_bytes
        .copy_from_slice(&bincode::serialize(&context).unwrap());
    profile_key_credential_response_bytes.copy_from_slice(&bincode::serialize(&response).unwrap());
}

#[test]
fn test_integration_pni() {
    // SERVER
    let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32);
    let server_public_params = server_secret_params.get_public_params();

    // CLIENT
    let master_key = zkgroup::groups::GroupMasterKey::new(zkgroup::TEST_ARRAY_32_1);
    let group_secret_params =
        zkgroup::groups::GroupSecretParams::derive_from_master_key(master_key);
    let group_public_params = group_secret_params.get_public_params();

    let aci = zkgroup::TEST_ARRAY_16;
    let pni = zkgroup::TEST_ARRAY_16_1;
    let profile_key =
        zkgroup::profiles::ProfileKey::create(zkgroup::common::constants::TEST_ARRAY_32_1);
    let profile_key_commitment = profile_key.get_commitment(aci);

    // Create context and request
    let randomness = zkgroup::TEST_ARRAY_32_3;

    let context = server_public_params.create_pni_credential_request_context(
        randomness,
        aci,
        pni,
        profile_key,
    );
    let request = context.get_request();

    // SERVER

    let randomness = zkgroup::TEST_ARRAY_32_4;
    let response = server_secret_params
        .issue_pni_credential(randomness, &request, aci, pni, profile_key_commitment)
        .unwrap();

    // CLIENT
    // Gets stored profile credential
    let pni_credential = server_public_params
        .receive_pni_credential(&context, &response)
        .unwrap();

    // Create presentation
    let randomness = zkgroup::TEST_ARRAY_32_5;

    let presentation_v1 = server_public_params.create_pni_credential_presentation_v1(
        randomness,
        group_secret_params,
        pni_credential,
    );

    let presentation_v2 = server_public_params.create_pni_credential_presentation_v2(
        randomness,
        group_secret_params,
        pni_credential,
    );

    let presentation_any = server_public_params.create_pni_credential_presentation(
        randomness,
        group_secret_params,
        pni_credential,
    );

    let presentation_v1_bytes = &bincode::serialize(&presentation_v1).unwrap();
    let presentation_v2_bytes = &bincode::serialize(&presentation_v2).unwrap();
    let presentation_any_bytes = &bincode::serialize(&presentation_any).unwrap();

    //for b in presentation_bytes.iter() {
    //    print!("0x{:02x}, ", b);
    //}

    assert!(PNI_CREDENTIAL_PRESENTATION_V1_RESULT[..] == presentation_v1_bytes[..]);
    assert!(PNI_CREDENTIAL_PRESENTATION_V2_RESULT[..] == presentation_v2_bytes[..]);
    assert!(PNI_CREDENTIAL_PRESENTATION_V2_RESULT[..] == presentation_any_bytes[..]);

    let presentation_v1_parsed =
        zkgroup::profiles::AnyPniCredentialPresentation::new(presentation_v1_bytes).unwrap();
    let presentation_v2_parsed =
        zkgroup::profiles::AnyPniCredentialPresentation::new(presentation_v2_bytes).unwrap();

    server_secret_params
        .verify_pni_credential_presentation(group_public_params, &presentation_v1_parsed)
        .unwrap();

    server_secret_params
        .verify_pni_credential_presentation(group_public_params, &presentation_v2_parsed)
        .unwrap();

    server_secret_params
        .verify_pni_credential_presentation_v1(group_public_params, &presentation_v1)
        .unwrap();

    server_secret_params
        .verify_pni_credential_presentation_v2(group_public_params, &presentation_v2)
        .unwrap();

    // test encoding
    // these tests will also discover if the serialized sizes change,
    //   necessitating an update to the LEN constants

    let mut pni_credential_bytes = [0u8; zkgroup::common::constants::PNI_CREDENTIAL_LEN];
    let mut pni_credential_presentation_v1_bytes =
        [0u8; zkgroup::common::constants::PNI_CREDENTIAL_PRESENTATION_V1_LEN];
    let mut pni_credential_presentation_v2_bytes =
        [0u8; zkgroup::common::constants::PNI_CREDENTIAL_PRESENTATION_V2_LEN];
    let mut pni_credential_request_context_bytes =
        [0u8; zkgroup::common::constants::PNI_CREDENTIAL_REQUEST_CONTEXT_LEN];
    let mut pni_credential_response_bytes =
        [0u8; zkgroup::common::constants::PNI_CREDENTIAL_RESPONSE_LEN];

    pni_credential_bytes.copy_from_slice(&bincode::serialize(&pni_credential).unwrap());
    pni_credential_presentation_v1_bytes
        .copy_from_slice(&bincode::serialize(&presentation_v1).unwrap());
    pni_credential_presentation_v2_bytes
        .copy_from_slice(&bincode::serialize(&presentation_v2).unwrap());
    pni_credential_request_context_bytes.copy_from_slice(&bincode::serialize(&context).unwrap());
    pni_credential_response_bytes.copy_from_slice(&bincode::serialize(&response).unwrap());
}

#[test]
fn test_server_sigs() {
    let server_secret_params =
        zkgroup::api::server_params::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32);
    let server_public_params = server_secret_params.get_public_params();
    let randomness = zkgroup::TEST_ARRAY_32_2;
    let message = zkgroup::TEST_ARRAY_32_1;
    let signature = server_secret_params.sign(randomness, &message);
    //println!("signature = {:#x?}", &signature[..]);
    for b in signature.iter() {
        print!("0x{:02x}, ", b);
    }
    assert!(
        signature[..]
            == [
                0x87, 0xd3, 0x54, 0x56, 0x4d, 0x35, 0xef, 0x91, 0xed, 0xba, 0x85, 0x1e, 0x08, 0x15,
                0x61, 0x2e, 0x86, 0x4c, 0x22, 0x7a, 0x04, 0x71, 0xd5, 0x0c, 0x27, 0x06, 0x98, 0x60,
                0x44, 0x06, 0xd0, 0x03, 0xa5, 0x54, 0x73, 0xf5, 0x76, 0xcf, 0x24, 0x1f, 0xc6, 0xb4,
                0x1c, 0x6b, 0x16, 0xe5, 0xe6, 0x3b, 0x33, 0x3c, 0x02, 0xfe, 0x4a, 0x33, 0x85, 0x80,
                0x22, 0xfd, 0xd7, 0xa4, 0xab, 0x36, 0x7b, 0x06,
            ][..]
    );
    server_public_params
        .verify_signature(&message, signature)
        .unwrap();
}

#[test]
fn test_blob_encryption() {
    let master_key = zkgroup::groups::GroupMasterKey::new(zkgroup::TEST_ARRAY_32_1);
    let group_secret_params =
        zkgroup::groups::GroupSecretParams::derive_from_master_key(master_key);
    let randomness = zkgroup::TEST_ARRAY_32_2;

    let plaintext_vec = vec![
        0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
        0x18, 0x19,
    ];

    // WARNING: THIS VECTOR DOES *NOT* MATCH JAVA/SWIFT/NODE AS THEY IMPLEMENT PADDING
    let ciphertext_vec = vec![
        0xe9, 0x58, 0x07, 0xb1, 0x90, 0xd4, 0x78, 0xd7, 0xbe, 0x3a, 0x77, 0xb2, 0x29, 0x27, 0x13,
        0x2e, 0xeb, 0xa5, 0x1c, 0x73, 0x9c, 0xd5, 0x70, 0x73, 0x17, 0xf7, 0x3e, 0x59, 0x1a, 0x91,
        0x5f, 0xff, 0x1f, 0x20, 0xa3, 0x02, 0x69, 0x2a, 0xfd, 0xc7, 0x08, 0x7f, 0x10, 0x19, 0x60,
        0x00,
    ];

    let calc_ciphertext_vec = group_secret_params.encrypt_blob(randomness, &plaintext_vec);
    let calc_plaintext_vec = group_secret_params
        .decrypt_blob(&calc_ciphertext_vec)
        .unwrap();
    assert!(calc_plaintext_vec == plaintext_vec);
    for b in calc_ciphertext_vec.iter() {
        print!("0x{:02x}, ", b);
    }
    assert!(calc_ciphertext_vec == ciphertext_vec);
}

/// Check that older clients can still retrieve the UUID and profile key ciphertexts from a v2
/// presentation.
///
/// This only matters for ProfileKeyCredentialPresentations; other presentation kinds are only
/// presented to the server.
#[test]
fn test_profile_key_credential_presentation_v2_as_v1() {
    let v2 = zkgroup::profiles::AnyProfileKeyCredentialPresentation::new(
        &PROFILE_KEY_CREDENTIAL_PRESENTATION_V2_RESULT,
    )
    .unwrap();
    let v2_as_v1 = bincode::deserialize::<zkgroup::profiles::ProfileKeyCredentialPresentationV1>(
        &PROFILE_KEY_CREDENTIAL_PRESENTATION_V2_RESULT,
    )
    .unwrap();
    assert!(v2.get_uuid_ciphertext() == v2_as_v1.get_uuid_ciphertext());
    assert!(v2.get_profile_key_ciphertext() == v2_as_v1.get_profile_key_ciphertext());
}
