name: Publish JNI Artifacts to GitHub Release

on:
  push:
    tags:
      - v*

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build

    # Only run this in the public repository.
    if: "!endsWith(github.repository, '-private')"

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            library: libsignal_jni.so
          - os: windows-latest
            library: signal_jni.dll
          - os: macos-latest
            library: libsignal_jni.dylib
            additional-rust-target: aarch64-apple-darwin

    env:
      # Keep this settings in sync with java/build_jni.sh, which supports Android as well.
      CARGO_PROFILE_RELEASE_DEBUG: 1
      CARGO_PROFILE_RELEASE_LTO: thin
      CARGO_PROFILE_RELEASE_OPT_LEVEL: s

    steps:
    - uses: actions/checkout@v2

    - name: Install nightly rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        target: ${{ matrix.additional-rust-target }}

    - run: cargo build --release -p libsignal-jni

    - run: cargo build --release -p libsignal-jni --target aarch64-apple-darwin
      if: matrix.os == 'macos-latest'

    - name: Merge library slices (for macOS)
      # Using target/release/ for both the input and output wouldn't normally be ideal
      # from a build system perspective, but we're going to immediately upload the merged library.
      run: lipo -create target/release/${{ matrix.library }} target/aarch64-apple-darwin/release/${{ matrix.library }} -output target/release/${{ matrix.library }}
      if: matrix.os == 'macos-latest'

    - name: Upload
      uses: svenstaro/upload-release-action@2.2.0
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: target/release/${{ matrix.library }}
        tag: ${{ github.ref }}
        overwrite: true
