name: Slow Tests

on:
  schedule:
    # "High load times include the start of every hour.
    #  To decrease the chance of delay, schedule your workflow to run
    #  at a different time of the hour."
    # We pick 8:25 UTC, aiming for "later than PST/UTC-8 night work" and
    # "earlier than ADT/UTC-3 morning work".
    - cron: '25 8 * * *'
  workflow_dispatch: {} # no parameters

jobs:
  check-up-to-date:
    name: Already up to date?
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'schedule' }}
    outputs:
      has-changes: ${{ steps.check.outputs.has-changes }}
    steps:
    - uses: actions/checkout@v2
    - run: git log --after '24 hours ago' --exit-code || echo '::set-output name=has-changes::true'
      id: check

  java-docker:
    name: Java (Docker)
    runs-on: ubuntu-latest
    needs: [check-up-to-date]
    if: ${{ always() && (needs.check-up-to-date.outputs.has-changes || needs.check-up-to-date.result == 'skipped') }}

    steps:
    - uses: actions/checkout@v2
    - run: make -C java java_test
    - name: Upload JNI libraries
      uses: actions/upload-artifact@v3
      with:
        name: jniLibs
        path: java/android/src/main/jniLibs/*
        retention-days: 2

  android-emulator-tests:
    name: Android Emulator Tests
    # For hardware acceleration; see https://github.com/ReactiveCircus/android-emulator-runner/issues/46
    runs-on: macos-latest
    needs: [java-docker]
    if: ${{ always() && needs.java-docker.result == 'success' }}

    strategy:
      fail-fast: false
      matrix:
        arch: [x86, x86_64]
        include:
        - arch: x86
          api-level: 19
        - arch: x86_64
          api-level: 21

    steps:
      - run: 'echo "JAVA_HOME=$JAVA_HOME_11_X64" >> "$GITHUB_ENV"'

      - uses: actions/checkout@v2

      - name: Download JNI libraries
        id: download
        uses: actions/download-artifact@v3
        with:
          name: jniLibs
          path: java/android/src/main/jniLibs/

      # From reactivecircus/android-emulator-runner
      - name: AVD cache
        uses: actions/cache@v3
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.arch }}-${{ matrix.api-level }}

      - name: Create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2.25.0
        with:
          arch: ${{ matrix.arch }}
          api-level: ${{ matrix.api-level }}
          force-avd-creation: false
          emulator-options: -no-window -noaudio -no-boot-anim
          script: echo "Generated AVD snapshot for caching."

      - name: Run tests
        uses: reactivecircus/android-emulator-runner@v2.25.0
        with:
          arch: ${{ matrix.arch }}
          api-level: ${{ matrix.api-level }}
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -noaudio -no-boot-anim
          script: ./gradlew android:connectedCheck -x makeJniLibrariesDesktop -x makeJniLibrariesAndroid
          working-directory: java

  node-docker:
    name: Node (Ubuntu via Docker)
    runs-on: ubuntu-latest
    needs: [check-up-to-date]
    if: ${{ always() && (needs.check-up-to-date.outputs.has-changes || needs.check-up-to-date.result == 'skipped') }}

    steps:
    - uses: actions/checkout@v2
    - run: node/docker-prebuildify.sh

  swift_cocoapod:
    name: Swift CocoaPod (with Catalyst)
    runs-on: macOS-latest
    needs: [check-up-to-date]
    if: ${{ always() && (needs.check-up-to-date.outputs.has-changes || needs.check-up-to-date.result == 'skipped') }}

    steps:
      - uses: actions/checkout@v2

      - name: Check out SignalCoreKit
        uses: actions/checkout@v2
        with:
          repository: signalapp/SignalCoreKit
          path: SignalCoreKit

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          components: rust-src

      - name: Add iOS targets
        run: rustup target add x86_64-apple-ios aarch64-apple-ios aarch64-apple-ios-sim

      - name: Run pod lint
        # No import validation because it tries to build unsupported platforms (like 32-bit iOS).
        run: pod lib lint --verbose --platforms=ios --include-podspecs=SignalCoreKit/SignalCoreKit.podspec --skip-import-validation
