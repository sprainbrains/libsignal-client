//
// Copyright 2021 Signal Messenger, LLC.
// SPDX-License-Identifier: AGPL-3.0-only
//

import XCTest
@testable import LibSignalClient

class CryptoTests: TestCaseBase {
    func generateAesKey() -> [UInt8] {
        var key = Array(repeating: UInt8(0), count: 32)
        key.withUnsafeMutableBytes {
            try! fillRandom($0)
        }
        return key
    }

    func testAesGcmSiv() {
        let ptext: [UInt8] = [0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
        let expected_ctext: [UInt8] = [0x1d, 0xe2, 0x29, 0x67, 0x23, 0x7a, 0x81, 0x32, 0x91, 0x21, 0x3f, 0x26, 0x7e, 0x3b, 0x45, 0x2f, 0x02, 0xd0, 0x1a, 0xe3, 0x3e, 0x4e, 0xc8, 0x54]
        let ad: [UInt8] = [0x01]
        let key: [UInt8] = [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
        let nonce: [UInt8] = [0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]

        let gcm_siv = try! Aes256GcmSiv(key: key)

        let ctext = try! gcm_siv.encrypt(ptext, nonce: nonce, associatedData: ad)
        XCTAssertEqual(ctext, expected_ctext)

        let recovered = try! gcm_siv.decrypt(ctext, nonce: nonce, associatedData: ad)
        XCTAssertEqual(recovered, ptext)

        XCTAssertThrowsError(try gcm_siv.decrypt(ptext, nonce: nonce, associatedData: ad))
        XCTAssertThrowsError(try gcm_siv.decrypt(ctext, nonce: ad, associatedData: nonce))
    }

    func testAesGcm() {
        let plainTextData = Data("Superüî•secretüî•testüî•dataüèÅüèÅ".utf8)
        XCTAssertEqual(39, plainTextData.count)

        let key = generateAesKey()
        let encryptedParts = try! Aes256GcmEncryptedData.encrypt(plainTextData, key: key)
        let encryptedData = encryptedParts.concatenate()
        XCTAssertEqual(Aes256GcmEncryptedData.nonceLength + plainTextData.count + Aes256GcmEncryptedData.authenticationTagLength, encryptedData.count)

        let splitParts = try! Aes256GcmEncryptedData(concatenated: encryptedData)
        XCTAssertEqual(encryptedParts.nonce, splitParts.nonce)
        XCTAssertEqual(encryptedParts.ciphertext, splitParts.ciphertext)
        XCTAssertEqual(encryptedParts.authenticationTag, splitParts.authenticationTag)

        let decryptedData = try! splitParts.decrypt(key: key)
        XCTAssertEqual(39, decryptedData.count)
        XCTAssertEqual(plainTextData, decryptedData)

        var encryptedWithBadTag = encryptedData
        encryptedWithBadTag[encryptedWithBadTag.count - 1] ^= 0xff
        XCTAssertThrowsError(try Aes256GcmEncryptedData(concatenated: encryptedWithBadTag).decrypt(key: key)) {
            guard case SignalError.invalidMessage(_) = $0 else {
                XCTFail("wrong error: \($0)")
                return
            }
        }
    }

    func testAesGcmKat() {
        let key: [UInt8] = [0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c, 0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08, 0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c, 0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08]
        let plaintext = Data([0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5, 0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5, 0x26, 0x9a, 0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda, 0x2e, 0x4c, 0x30, 0x3d, 0x8a, 0x31, 0x8a, 0x72, 0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53, 0x2f, 0xcf, 0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25, 0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57, 0xba, 0x63, 0x7b, 0x39])
        let expectedCiphertext = Data([0x52, 0x2d, 0xc1, 0xf0, 0x99, 0x56, 0x7d, 0x07, 0xf4, 0x7f, 0x37, 0xa3, 0x2a, 0x84, 0x42, 0x7d, 0x64, 0x3a, 0x8c, 0xdc, 0xbf, 0xe5, 0xc0, 0xc9, 0x75, 0x98, 0xa2, 0xbd, 0x25, 0x55, 0xd1, 0xaa, 0x8c, 0xb0, 0x8e, 0x48, 0x59, 0x0d, 0xbb, 0x3d, 0xa7, 0xb0, 0x8b, 0x10, 0x56, 0x82, 0x88, 0x38, 0xc5, 0xf6, 0x1e, 0x63, 0x93, 0xba, 0x7a, 0x0a, 0xbc, 0xc9, 0xf6, 0x62])
        let expectedTag = Data([0x76, 0xfc, 0x6e, 0xce, 0x0f, 0x4e, 0x17, 0x68, 0xcd, 0xdf, 0x88, 0x53, 0xbb, 0x2d, 0x55, 0x1b])
        let nonce: [UInt8] = [0xca, 0xfe, 0xba, 0xbe, 0xfa, 0xce, 0xdb, 0xad, 0xde, 0xca, 0xf8, 0x88]
        let ad: [UInt8] = [0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef, 0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef, 0xab, 0xad, 0xda, 0xd2]

        let gcmEnc = try! Aes256GcmEncryption(key: key, nonce: nonce, associatedData: ad)
        var ciphertext = plaintext
        try! gcmEnc.encrypt(&ciphertext)
        let tag = try! gcmEnc.computeTag()
        XCTAssertEqual(ciphertext, expectedCiphertext)
        XCTAssertEqual(tag, expectedTag)

        let gcmDec = try! Aes256GcmDecryption(key: key, nonce: nonce, associatedData: ad)
        var decrypted = ciphertext
        try! gcmDec.decrypt(&decrypted)
        XCTAssertEqual(decrypted, plaintext)
        XCTAssert(try! gcmDec.verifyTag(tag))

        let gcmEnc2 = try! Aes256GcmEncryption(key: key, nonce: nonce, associatedData: ad)
        var ciphertextSplit = plaintext
        try! gcmEnc2.encrypt(&ciphertextSplit[..<1])
        try! gcmEnc2.encrypt(&ciphertextSplit[1...])
        let tag2 = try! gcmEnc2.computeTag()
        XCTAssertEqual(ciphertextSplit, expectedCiphertext)
        XCTAssertEqual(tag2, expectedTag)

        let gcmDec2 = try! Aes256GcmDecryption(key: key, nonce: nonce, associatedData: ad)
        var decryptedSplit = ciphertext
        try! gcmDec2.decrypt(&decryptedSplit[..<1])
        try! gcmDec2.decrypt(&decryptedSplit[1...])
        XCTAssertEqual(decryptedSplit, plaintext)
        XCTAssert(try! gcmDec2.verifyTag(tag))
    }

    func testAesCtr() {
        let plainTextData = Data("Superüî•secretüî•testüî•dataüèÅüèÅ".utf8)
        let key = generateAesKey()
        var nonce = Array(repeating: UInt8(0), count: Aes256Ctr32.nonceLength)
        nonce.withUnsafeMutableBytes {
            try! fillRandom($0)
        }

        var encryptedData = plainTextData
        try! Aes256Ctr32.process(&encryptedData, key: key, nonce: nonce)
        var decryptedData = encryptedData
        try! Aes256Ctr32.process(&decryptedData, key: key, nonce: nonce)
        XCTAssertEqual(plainTextData, decryptedData)
    }

    func testAesCtrKat() {
        let key: [UInt8] = [0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81, 0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4]
        let plaintext = Data([0xfd, 0x4c, 0x14, 0x72, 0x9f, 0x50, 0x04, 0xba, 0x49, 0xd8, 0x32, 0xad, 0x7b, 0xe8, 0x7c, 0x18, 0xf4, 0xfa, 0xfb, 0x58, 0x96, 0x2b, 0x9a, 0x43, 0xc3, 0xbe, 0x41, 0x71, 0x3d, 0xed, 0x93, 0xdb, 0xf8, 0x54, 0xac, 0x4c, 0xa2, 0x62, 0x85, 0xb7, 0xf7, 0x6e, 0x04, 0xb8, 0xf8, 0xd4, 0xe7, 0xd9, 0xf7, 0x54, 0x8f, 0x9b, 0x46, 0x5c, 0x8f, 0x71, 0x3c, 0x10, 0x6e, 0x9f, 0x63, 0xf5, 0x43, 0x05, 0x33, 0x1a, 0x49, 0x83, 0xa2, 0xf4, 0xb7, 0x18, 0xde, 0x29, 0xfa, 0x79, 0x4d, 0xa1, 0x2e, 0xee, 0x80, 0x86, 0x42, 0xfa, 0xef, 0xf8, 0x27, 0x1a, 0x0e, 0xa2, 0x8e, 0x3c, 0xc8, 0x0e, 0xeb, 0x65, 0xa8, 0xeb, 0x61, 0xf6, 0x9d, 0x8b, 0xa9, 0x7f, 0x6b, 0xf9, 0x05, 0x44, 0x53, 0xf5, 0x5e, 0xfb, 0x8f, 0x94, 0x22, 0x08, 0x1f, 0x16, 0x20, 0xfe, 0x44, 0xac, 0xf9, 0x9e, 0x81, 0x12, 0x2f, 0x73, 0xd3, 0xf9, 0x21, 0xd5, 0xe3, 0x39, 0x16, 0x54, 0xe9, 0x94, 0x79, 0x04, 0x98, 0x43, 0x75, 0xb7, 0x25, 0xfd, 0xfb, 0xa8, 0x95, 0xc5, 0xcd, 0xe3, 0xd2, 0x25, 0xd7, 0xbe, 0x3a, 0x21, 0x3c, 0x39, 0x65, 0x17, 0x8a, 0x7d, 0xc1, 0xe3, 0xb5, 0x52, 0xec, 0x7b, 0x2f, 0xfd, 0x9c, 0x77, 0xeb, 0xcc, 0x24, 0x3c, 0x45, 0x00, 0xdf, 0xdf, 0xbe, 0x3b, 0x75, 0x54, 0xaa, 0x42, 0x7c, 0x01, 0x30, 0x5b, 0xec, 0x48, 0xd7, 0x1a, 0xf2, 0x7c, 0x59, 0x11, 0xd1, 0xe6, 0x49, 0xc6, 0x20, 0xd2, 0x2c, 0xf5, 0xf3, 0xa5, 0xae, 0xb9, 0x46, 0x86, 0x51, 0xda, 0x79, 0x6f, 0x36, 0x95, 0x22, 0xfa, 0xf9, 0x1e, 0xfa, 0xbf, 0x0f, 0xeb, 0xd3, 0x3f, 0xca, 0x41, 0xc9, 0x53, 0x46, 0x06, 0xa4, 0xea, 0x01, 0x99, 0xb9, 0x04, 0xb2, 0x43, 0xba, 0x9c, 0xb8, 0xf3, 0x7a, 0x79, 0x2d, 0xf0, 0x2e, 0xfa, 0xb8, 0xf0, 0xe2, 0xe0, 0xcf, 0x1d, 0x57, 0x9d, 0xab, 0xa0, 0x42, 0xcf, 0xe4, 0xc9, 0x43, 0x0a, 0xd4, 0xed, 0xa7, 0x86, 0x05, 0x2f, 0xcf, 0x15, 0xe7, 0xac, 0xfa, 0x27, 0x36, 0xaa, 0xb4, 0x59, 0x0f, 0x73, 0x67, 0x5f, 0xa1, 0x80, 0x5f, 0xe2, 0x38, 0x92, 0xc6, 0x3e, 0x0c, 0xd0, 0x1d, 0x00, 0x69, 0x35, 0xa6, 0xe3, 0xf8, 0xe1, 0x05, 0xa7, 0x54, 0x80, 0x3d, 0x00, 0xd9, 0x85, 0x7e, 0x49, 0x63, 0x6a, 0xb0, 0x34, 0x16, 0x41, 0x56, 0x85, 0x6d, 0x58, 0xa2, 0x44, 0xea, 0xd4, 0x75, 0x30, 0x0d, 0x93, 0xb3, 0x1e, 0x44, 0xb5, 0xbe, 0x3b, 0xbf, 0x69, 0x94, 0xed, 0xb8, 0x95, 0x80, 0x4b, 0x4f, 0x1b, 0xad, 0x43, 0xec, 0xfe, 0x08, 0xb4, 0xe1, 0x30, 0x14, 0x8b, 0x66, 0x9f, 0xe6, 0x20, 0xe4, 0xf7, 0x30, 0x34, 0xfc, 0x3e, 0x74, 0x82, 0x37, 0x87, 0x0b, 0xec, 0x3b, 0x1f, 0x51, 0x76, 0x84, 0x65, 0x4d, 0x1d, 0x6b, 0xc0, 0x74, 0xdd, 0xf7, 0xb7, 0x59, 0xa2, 0x40, 0x5f, 0x78, 0xed, 0x84, 0xd1, 0x00, 0x6d, 0x25, 0xaf, 0x9b, 0xbc, 0x12, 0xd6, 0xc6, 0x32, 0xf5, 0xd5, 0x43, 0xda, 0x0c, 0xbe, 0x9e, 0xa8, 0x66, 0xb2, 0xc9, 0x21, 0x26, 0x00, 0x9c, 0x27, 0xad, 0x59, 0x39, 0x4b, 0x76, 0x33, 0x7d, 0xe2, 0x46, 0xb5, 0x08, 0x95, 0x31, 0x7e, 0x2e, 0x34, 0x5d, 0xf3, 0x62, 0x9a, 0x5f, 0x62, 0x27, 0xf6, 0x45, 0x22, 0x86, 0x6e, 0x7a, 0x39, 0x12, 0x1c, 0xcc, 0x55, 0x2e, 0x3d, 0xab, 0xc9, 0x89, 0xdc, 0xe0, 0x66, 0xde, 0xa3, 0x55, 0xf7, 0x88, 0xc5, 0xd9, 0x2a, 0xda, 0x09, 0x99, 0x17, 0xa2, 0x97, 0xcf, 0xef, 0xa8, 0x67, 0xce, 0x37, 0x65, 0x6f, 0xac, 0x6a, 0x50, 0x79, 0x8c, 0x10, 0xb3, 0x94, 0xd5, 0xba, 0x54, 0xf8, 0x5c, 0xf0, 0xf7, 0xef, 0x1e, 0xed, 0xdf, 0xca, 0x1e, 0x53, 0xe9, 0x3f, 0x13, 0x49, 0x88, 0x8c, 0xc7, 0x45, 0x19, 0x0c, 0x19, 0x6f, 0x84, 0xec, 0xf0, 0x72, 0x12, 0x87, 0xcc, 0x59, 0x2d, 0x40, 0x6f, 0x0a, 0x6c, 0xc5, 0xa5, 0x52, 0x94, 0xbf, 0x7a, 0xa3, 0xb3, 0x5f, 0x6c, 0xef, 0xc6, 0x1c, 0xab, 0x79, 0x4b, 0x12, 0x44, 0x43, 0x12, 0xb5, 0xe5, 0x0e, 0xc0, 0x71, 0x2e, 0x22, 0x1c, 0xc9, 0x5e, 0x9e, 0x26, 0xe9, 0xc3, 0xd0, 0x00, 0x88, 0x1e, 0x79, 0x2a, 0xfc, 0xb5, 0x86, 0x41, 0xb1, 0xa9, 0x46, 0x13, 0xd6, 0x4e, 0xc7, 0x2f, 0x3d, 0xb9, 0xab, 0x65, 0xba, 0x07, 0xa4, 0xf0, 0x5b, 0x7e, 0x9e, 0xe7, 0xb3, 0x35, 0xd8, 0x6a, 0x06, 0xfc, 0xbd, 0xb8, 0xcb, 0xd6, 0x95, 0xae, 0xef, 0x53, 0x96, 0x4a, 0x96, 0x5f, 0xfe, 0x4c, 0x6d, 0x7b, 0x4e, 0x58, 0x0a, 0xb1, 0x39, 0xf8, 0x42, 0x2a, 0x70, 0x2e, 0x09, 0xea, 0xcb, 0xea, 0x5d, 0x51, 0x2c, 0x31, 0xa9, 0x55, 0xb3, 0xd6, 0x03, 0x10, 0xbe, 0x2b, 0xbd, 0xd7, 0x34, 0x84, 0xba, 0xe6, 0x61, 0x27, 0x91, 0xa1, 0x9d, 0xa3, 0xc7, 0xb0, 0xfd, 0x14, 0x87, 0xe7, 0x21, 0x31, 0xa8, 0xf9, 0xcb, 0x80, 0x17, 0x90, 0xce, 0x8a, 0x6e, 0x1e, 0x37, 0x86, 0x62, 0xce, 0xdc, 0xd5, 0xee, 0x82, 0xbd, 0x39, 0x05, 0x76, 0xac, 0xfe, 0x53, 0x34, 0xec, 0xd9, 0xd9, 0x07, 0x27, 0x3a, 0xef, 0xe6, 0x70, 0x58, 0x91, 0x63, 0x88, 0x21, 0x06, 0x38, 0xe5, 0xe6, 0x0f, 0x20, 0xee, 0x92, 0x38, 0x9b, 0x35, 0x33, 0xfd, 0x6a, 0xff, 0xd3, 0x30, 0x95, 0xb2, 0x3d, 0x16, 0x9f, 0x09, 0x13, 0x65, 0x7f, 0x03, 0x3b, 0x8d, 0x5c, 0x4e, 0xa5, 0x17, 0xf1, 0x67, 0xc1, 0xd5, 0x3e, 0x03, 0x17, 0x87, 0xbb, 0xe6, 0xd5, 0xb5, 0x77, 0x24, 0x5f, 0xff, 0x81, 0x51, 0xcd, 0x8f, 0xdc, 0xc5, 0xd6, 0xc3, 0x2d, 0xf7, 0x0f, 0xb8, 0x04, 0x3d, 0x42, 0xf8, 0x96, 0xcd, 0x51, 0x3b, 0x4c, 0x85, 0xcf, 0xf2, 0x92, 0x67, 0x6c, 0xf1, 0x3b, 0x6a, 0x19, 0x31, 0xe8, 0x77, 0x27, 0xa5, 0x61, 0x71, 0x1a, 0x31, 0x05, 0xd9, 0xf3, 0x51, 0x9b, 0x90, 0xc9, 0x42, 0x9b, 0x5c, 0xd3, 0xed, 0xaa, 0xe3, 0xee, 0x33, 0x48, 0x26, 0xa3, 0xfd, 0x74, 0xd6, 0x17, 0x5b, 0x55, 0x89, 0xdb, 0x39, 0x2f, 0x95, 0x6a, 0x67, 0xc5, 0xe6, 0x7b, 0xe5, 0x96, 0x56, 0xf1, 0xcb, 0x37, 0xe5, 0x2c, 0x63, 0x6b, 0x26, 0x92, 0xa6, 0x0c, 0x20, 0x44, 0x32, 0x74, 0x72, 0xfa, 0x9a, 0xf6, 0x51, 0xaf, 0xbc, 0xf5, 0x5d, 0x83, 0x98, 0xa3, 0x1d, 0x34, 0x30, 0x74, 0x93, 0x1a, 0x72, 0xd5, 0x48, 0x33, 0xb2, 0x9e, 0xf2, 0x1f, 0xcb, 0x6e, 0xf4, 0x19, 0xbb, 0x56, 0x31, 0x35, 0x13, 0xe4, 0x6c, 0x65, 0xd8, 0x33, 0x67, 0x7d, 0xbb, 0x0f, 0x28, 0x13, 0xe9, 0xce, 0x5e, 0xf7, 0x06, 0x76, 0x10, 0x2c, 0xa0, 0xd3, 0xc1, 0x4b, 0xbd, 0xd6, 0x59, 0xa7, 0x49, 0x8f, 0xa0, 0x8c, 0xd3, 0x59, 0xd4, 0x28, 0xa8, 0x03, 0xae, 0xfc, 0xc6, 0x60, 0xe9, 0xfc, 0x70, 0x4e, 0x9b, 0xac, 0xc5, 0xf1, 0xd2, 0x7f, 0x25, 0x28, 0xd4, 0x6b, 0x3f, 0xca, 0xa2, 0xd4, 0x7d, 0xfa, 0x28, 0xbf, 0x4c])
        let expectedCiphertext = Data([0xf0, 0xc1, 0xdd, 0x48, 0xe5, 0x84, 0x3e, 0xb0, 0x3d, 0xe5, 0xab, 0xb2, 0x98, 0x69, 0x7d, 0xc0, 0xf1, 0x03, 0xa9, 0xd0, 0xc2, 0x30, 0x62, 0x0b, 0xcd, 0x86, 0x46, 0x77, 0x58, 0x37, 0x9d, 0xaa, 0x01, 0xae, 0x18, 0x08, 0x7d, 0x96, 0x09, 0x6a, 0x88, 0x14, 0xe9, 0x88, 0x08, 0xab, 0x9b, 0x9c, 0x94, 0x39, 0x17, 0x27, 0x30, 0x54, 0x20, 0x1c, 0xa3, 0xcd, 0xf2, 0xd4, 0x9f, 0x3a, 0xc7, 0x89, 0x6d, 0x34, 0xdb, 0x1c, 0xb1, 0xd7, 0x95, 0x9b, 0x4d, 0xd5, 0x03, 0xf7, 0xb2, 0x5b, 0x33, 0x90, 0xe0, 0xdb, 0xca, 0xcb, 0x15, 0xbb, 0xe8, 0x97, 0x82, 0x36, 0xd7, 0x5a, 0xe2, 0x4d, 0x7c, 0xa0, 0xc4, 0xd5, 0x16, 0x84, 0x6e, 0xc0, 0xcc, 0x0e, 0x05, 0xb5, 0x05, 0xb3, 0xd9, 0xd1, 0xc6, 0xe5, 0x01, 0x65, 0x91, 0x8c, 0x26, 0x67, 0x2e, 0xd1, 0x52, 0x52, 0x65, 0xb2, 0x9f, 0x63, 0x36, 0x13, 0x8c, 0xed, 0xca, 0x58, 0xe7, 0xf4, 0x47, 0xa8, 0x1b, 0x94, 0x85, 0xf7, 0x43, 0xb5, 0xe0, 0x1f, 0xd5, 0xa5, 0x43, 0xf1, 0x8d, 0x93, 0x35, 0xc5, 0xe2, 0xd1, 0x9c, 0xae, 0x82, 0x45, 0xa9, 0x22, 0x4a, 0x2b, 0xaa, 0xbd, 0xf7, 0x67, 0x0e, 0x47, 0xbd, 0x22, 0xcf, 0x46, 0x5d, 0xf8, 0x56, 0x36, 0x21, 0x12, 0x4a, 0x80, 0x91, 0x32, 0x5c, 0x67, 0x0e, 0x4f, 0x8f, 0xa0, 0x28, 0x68, 0x65, 0x05, 0xce, 0xe8, 0x7d, 0x52, 0xd6, 0x3d, 0x19, 0x65, 0xe6, 0x5d, 0xaf, 0x61, 0xf5, 0xe1, 0xb0, 0x0a, 0xe3, 0x3d, 0x4e, 0x5a, 0x42, 0x49, 0x69, 0x50, 0xe8, 0xd7, 0x57, 0x10, 0xcf, 0x8c, 0x47, 0x71, 0x8f, 0x60, 0x71, 0x85, 0x0d, 0x11, 0xb5, 0x52, 0xe1, 0x9b, 0xa0, 0xfa, 0xbe, 0xf5, 0xcc, 0xc7, 0x81, 0x3b, 0xa4, 0xbd, 0x0b, 0x59, 0x36, 0x94, 0xb3, 0x17, 0xf0, 0x4f, 0xbe, 0x9c, 0xaf, 0x48, 0xaf, 0xf1, 0x4a, 0x45, 0x55, 0xf7, 0x8a, 0xb0, 0x56, 0xd4, 0x14, 0x87, 0x47, 0xc7, 0xbd, 0x5a, 0x8b, 0x6e, 0x4b, 0xc8, 0x5d, 0x42, 0xaa, 0xe4, 0xe2, 0x63, 0x4a, 0xd9, 0x02, 0x8e, 0x5f, 0x32, 0x34, 0x5a, 0x68, 0x13, 0xc2, 0x91, 0x58, 0x83, 0x62, 0xa7, 0xec, 0xf6, 0xe0, 0xc3, 0xb3, 0xa3, 0xdb, 0x9d, 0xba, 0xa8, 0x2d, 0x27, 0x54, 0x96, 0x2f, 0x5d, 0x9b, 0x3e, 0x0f, 0xd1, 0x66, 0xcb, 0x11, 0xb5, 0x25, 0x40, 0x81, 0x41, 0x7d, 0xac, 0x0e, 0x35, 0xc0, 0x0b, 0x56, 0xeb, 0xeb, 0xd1, 0x21, 0x12, 0xae, 0x20, 0x2c, 0x09, 0x4f, 0xe3, 0xb2, 0x42, 0x52, 0xf0, 0x78, 0x7f, 0xb0, 0x9c, 0x6c, 0x51, 0x03, 0x6c, 0xea, 0xc6, 0xdd, 0xde, 0x4a, 0xc5, 0x9a, 0xad, 0xa7, 0xc7, 0x6b, 0xc7, 0x9e, 0x95, 0x0b, 0x66, 0xff, 0xe6, 0xa0, 0x15, 0x45, 0x0e, 0x87, 0x70, 0xc8, 0xb2, 0xb4, 0x91, 0xcc, 0xec, 0x76, 0x10, 0xbf, 0x9a, 0x7f, 0x52, 0x3e, 0x5a, 0x57, 0x9f, 0xf6, 0x4c, 0x62, 0x70, 0x0a, 0x7e, 0x83, 0x04, 0x13, 0x9c, 0x68, 0xcf, 0xda, 0xb3, 0x4f, 0x7a, 0xd1, 0x8b, 0x89, 0x89, 0xa9, 0x80, 0x2e, 0xd9, 0xdd, 0x39, 0x3d, 0x88, 0x9c, 0xf4, 0xd5, 0x26, 0xc9, 0xb5, 0x3f, 0xdb, 0x0b, 0x78, 0xdc, 0xfa, 0xd4, 0x7b, 0x88, 0xc2, 0x3d, 0x69, 0x92, 0xe0, 0xe6, 0x3c, 0x31, 0xf8, 0x0d, 0x69, 0xb4, 0x27, 0xea, 0x7e, 0x71, 0x94, 0x4a, 0x61, 0x01, 0x3a, 0x0c, 0x70, 0xb2, 0xe9, 0xcf, 0xe2, 0x33, 0xa6, 0x1c, 0xb4, 0x93, 0x9d, 0x2f, 0xdd, 0xe7, 0x5e, 0x6f, 0xf8, 0xfe, 0xe6, 0xb4, 0x5d, 0x48, 0x1a, 0xd0, 0xad, 0x01, 0x10, 0x46, 0x9e, 0xdf, 0xfc, 0x01, 0xb1, 0xbf, 0x2e, 0x4f, 0x14, 0x14, 0xf9, 0x25, 0xd8, 0x6a, 0xd1, 0x98, 0xa2, 0x7a, 0x03, 0x88, 0x63, 0x7e, 0xdc, 0x7d, 0xd5, 0x47, 0xb8, 0xae, 0xca, 0x86, 0xec, 0xcb, 0x3a, 0xd5, 0xc0, 0x61, 0x5a, 0xf8, 0x42, 0x80, 0x96, 0xc8, 0x14, 0x2d, 0x75, 0x23, 0x5c, 0x46, 0x59, 0x95, 0xe5, 0xef, 0xf6, 0x22, 0x5e, 0x94, 0x91, 0x34, 0x57, 0x55, 0x1c, 0x1c, 0x18, 0x5e, 0x1d, 0x7b, 0xfa, 0x24, 0x37, 0xab, 0x56, 0xda, 0x49, 0x95, 0x48, 0x34, 0x62, 0x8a, 0xc4, 0x80, 0xd7, 0xba, 0xda, 0x35, 0xec, 0xbc, 0x34, 0xdc, 0x6e, 0xfe, 0xb2, 0x60, 0x09, 0xc8, 0x2a, 0x0c, 0xc3, 0xf4, 0x77, 0x75, 0x7a, 0x91, 0xdc, 0x6d, 0x65, 0x2c, 0xe7, 0xed, 0xd8, 0x2c, 0xb8, 0x91, 0xba, 0x3b, 0x49, 0xbf, 0xeb, 0x74, 0xbd, 0x2a, 0x35, 0xb3, 0xf5, 0xbc, 0xe7, 0x4a, 0x34, 0x35, 0x9d, 0xc0, 0x0d, 0xb8, 0xe0, 0x96, 0x1c, 0xb9, 0x75, 0x8c, 0xd9, 0x9e, 0xf2, 0x5c, 0xf7, 0x18, 0x97, 0x4d, 0x60, 0xed, 0x5e, 0x77, 0x33, 0xf5, 0x25, 0xc8, 0x1e, 0xdb, 0x04, 0x64, 0xc7, 0x93, 0x0a, 0xdd, 0x3e, 0x93, 0x36, 0xd8, 0x71, 0x5a, 0xeb, 0x37, 0xbb, 0x62, 0x48, 0x44, 0x24, 0x6a, 0x19, 0xd4, 0x33, 0xc0, 0xed, 0x61, 0x5c, 0x22, 0x1e, 0x5e, 0x89, 0x74, 0x5d, 0x24, 0x67, 0x74, 0x37, 0x73, 0x56, 0x06, 0x39, 0x89, 0x4b, 0x1a, 0xbd, 0x0f, 0x6e, 0x52, 0x89, 0xb5, 0x82, 0x6c, 0xee, 0x5f, 0xca, 0x76, 0xbd, 0xd6, 0xd0, 0xd4, 0xdd, 0x69, 0xfb, 0x4a, 0x50, 0xd7, 0xd8, 0x14, 0xa4, 0x8c, 0x7e, 0x35, 0x92, 0x0a, 0xbb, 0x8f, 0x0c, 0x1e, 0x60, 0xba, 0x92, 0xd6, 0x12, 0xf4, 0xf4, 0xbf, 0x56, 0x95, 0xa0, 0x89, 0xde, 0x63, 0x9b, 0xfb, 0xc6, 0xf3, 0x17, 0xf4, 0xfd, 0x89, 0x5d, 0x32, 0x57, 0xef, 0xbe, 0x1d, 0x49, 0xe9, 0x44, 0xb8, 0x2b, 0xad, 0xd4, 0xb2, 0x11, 0x64, 0xd4, 0xba, 0xe7, 0xa8, 0x72, 0xf1, 0x83, 0xa3, 0xc8, 0x38, 0x5f, 0x54, 0xfd, 0xd8, 0xf4, 0x71, 0x67, 0x21, 0x32, 0xdd, 0x44, 0xe5, 0x1c, 0xcd, 0xcf, 0xe1, 0x83, 0xc0, 0xce, 0x00, 0x03, 0x2a, 0x04, 0x88, 0x66, 0xaf, 0x6d, 0xfe, 0xa9, 0xe1, 0x5b, 0x58, 0xa1, 0x70, 0x93, 0x20, 0xe8, 0xfc, 0xa1, 0x6d, 0xef, 0xea, 0xb2, 0x33, 0x02, 0x7a, 0x9e, 0xa3, 0x11, 0x8a, 0x52, 0x1c, 0x94, 0xbe, 0x5c, 0x48, 0xa7, 0x2d, 0xe9, 0xc6, 0xfa, 0xbf, 0x21, 0x96, 0xe1, 0x23, 0xfc, 0x13, 0x56, 0xde, 0xa2, 0x23, 0x71, 0x25, 0x99, 0x75, 0x8a, 0x2f, 0x6f, 0xfe, 0x91, 0x92, 0x1c, 0x1a, 0xce, 0xe3, 0xec, 0x6c, 0x7b, 0x7a, 0x29, 0xa1, 0xd3, 0xc5, 0xf8, 0x8a, 0xe6, 0xfb, 0x50, 0xb4, 0x2e, 0x36, 0xc0, 0x77, 0x37, 0x31, 0xe2, 0x8c, 0xa3, 0xc9, 0x3a, 0x18, 0x62, 0x7d, 0x28, 0x7e, 0xd5, 0xf5, 0x38, 0x69, 0x14, 0x21, 0xdf, 0xfd, 0x36, 0xe3, 0xbb, 0x87, 0x18, 0x54, 0xbc, 0x58, 0x5f, 0x36, 0x7e, 0xdb, 0xe7, 0x0b, 0x02, 0x9f, 0x81, 0xf3, 0x60, 0x59, 0x82, 0xea, 0xfa, 0x41, 0x35, 0xe5, 0x4b, 0x78, 0xd0, 0xc6, 0xcd, 0xf1, 0x8a, 0xfe, 0x22, 0xff, 0x73, 0x08, 0xda, 0x70, 0x11, 0xf1, 0x5d, 0x35, 0x24, 0x90, 0x6f, 0x10, 0xfb, 0x6b, 0x78, 0x0f, 0xa9, 0xcc, 0x4b])
        let nonce: [UInt8] = [0xa6, 0xaa, 0xd9, 0xec, 0xed, 0x14, 0xbf, 0x1c, 0x61, 0x91, 0x0d, 0xba, 0, 0, 0, 35]

        var ciphertext = plaintext
        try! Aes256Ctr32.process(&ciphertext, key: key, nonce: nonce)
        XCTAssertEqual(ciphertext, expectedCiphertext)
    }

    static var allTests: [(String, (CryptoTests) -> () throws -> Void)] {
        return [
            ("testAesGcmSiv", testAesGcmSiv),
            ("testAesGcm", testAesGcm),
            ("testAesGcmKat", testAesGcmKat),
            ("testAesCtr", testAesCtr),
            ("testAesCtrKat", testAesCtrKat),
        ]
    }
}
