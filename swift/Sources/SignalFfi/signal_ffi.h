/*
Copyright (C) 2020-2021 Signal Messenger, LLC.
SPDX-License-Identifier: AGPL-3.0-only
*/


#ifndef SIGNAL_FFI_H_
#define SIGNAL_FFI_H_

/* This file was automatically generated by cbindgen */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

#define SignalNUM_AUTH_CRED_ATTRIBUTES 3

#define SignalNUM_PROFILE_KEY_CRED_ATTRIBUTES 4

#define SignalNUM_RECEIPT_CRED_ATTRIBUTES 2

#define SignalPRESENTATION_VERSION_1 0

#define SignalPRESENTATION_VERSION_2 1

#define SignalAES_KEY_LEN 32

#define SignalAESGCM_NONCE_LEN 12

#define SignalAESGCM_TAG_LEN 16

#define SignalGROUP_MASTER_KEY_LEN 32

#define SignalGROUP_SECRET_PARAMS_LEN 289

#define SignalGROUP_PUBLIC_PARAMS_LEN 97

#define SignalGROUP_IDENTIFIER_LEN 32

#define SignalAUTH_CREDENTIAL_LEN 181

#define SignalAUTH_CREDENTIAL_PRESENTATION_V1_LEN 493

#define SignalAUTH_CREDENTIAL_PRESENTATION_V2_LEN 461

#define SignalAUTH_CREDENTIAL_RESPONSE_LEN 361

#define SignalPNI_CREDENTIAL_LEN 161

#define SignalPNI_CREDENTIAL_PRESENTATION_V1_LEN 841

#define SignalPNI_CREDENTIAL_PRESENTATION_V2_LEN 841

#define SignalPNI_CREDENTIAL_REQUEST_CONTEXT_LEN 489

#define SignalPNI_CREDENTIAL_RESPONSE_LEN 521

#define SignalPROFILE_KEY_LEN 32

#define SignalPROFILE_KEY_CIPHERTEXT_LEN 65

#define SignalPROFILE_KEY_COMMITMENT_LEN 97

#define SignalPROFILE_KEY_CREDENTIAL_LEN 145

#define SignalPROFILE_KEY_CREDENTIAL_PRESENTATION_V1_LEN 713

#define SignalPROFILE_KEY_CREDENTIAL_PRESENTATION_V2_LEN 713

#define SignalPROFILE_KEY_CREDENTIAL_REQUEST_LEN 329

#define SignalPROFILE_KEY_CREDENTIAL_REQUEST_CONTEXT_LEN 473

#define SignalPROFILE_KEY_CREDENTIAL_RESPONSE_LEN 457

#define SignalPROFILE_KEY_VERSION_LEN 32

#define SignalPROFILE_KEY_VERSION_ENCODED_LEN 64

#define SignalRECEIPT_CREDENTIAL_LEN 129

#define SignalRECEIPT_CREDENTIAL_PRESENTATION_LEN 329

#define SignalRECEIPT_CREDENTIAL_REQUEST_LEN 97

#define SignalRECEIPT_CREDENTIAL_REQUEST_CONTEXT_LEN 177

#define SignalRECEIPT_CREDENTIAL_RESPONSE_LEN 409

#define SignalRECEIPT_SERIAL_LEN 16

#define SignalRESERVED_LEN 1

#define SignalSERVER_SECRET_PARAMS_LEN 1537

#define SignalSERVER_PUBLIC_PARAMS_LEN 289

#define SignalUUID_CIPHERTEXT_LEN 65

#define SignalRANDOMNESS_LEN 32

#define SignalSIGNATURE_LEN 64

#define SignalUUID_LEN 16

typedef enum {
  SignalCiphertextMessageType_Whisper = 2,
  SignalCiphertextMessageType_PreKey = 3,
  SignalCiphertextMessageType_SenderKey = 7,
  SignalCiphertextMessageType_Plaintext = 8,
} SignalCiphertextMessageType;

typedef enum {
  SignalContentHint_Default = 0,
  SignalContentHint_Resendable = 1,
  SignalContentHint_Implicit = 2,
} SignalContentHint;

typedef enum {
  SignalDirection_Sending = 0,
  SignalDirection_Receiving = 1,
} SignalDirection;

typedef enum {
  SignalLogLevel_Error = 1,
  SignalLogLevel_Warn,
  SignalLogLevel_Info,
  SignalLogLevel_Debug,
  SignalLogLevel_Trace,
} SignalLogLevel;

typedef enum {
  SignalErrorCode_UnknownError = 1,
  SignalErrorCode_InvalidState = 2,
  SignalErrorCode_InternalError = 3,
  SignalErrorCode_NullParameter = 4,
  SignalErrorCode_InvalidArgument = 5,
  SignalErrorCode_InvalidType = 6,
  SignalErrorCode_InvalidUtf8String = 7,
  SignalErrorCode_ProtobufError = 10,
  SignalErrorCode_LegacyCiphertextVersion = 21,
  SignalErrorCode_UnknownCiphertextVersion = 22,
  SignalErrorCode_UnrecognizedMessageVersion = 23,
  SignalErrorCode_InvalidMessage = 30,
  SignalErrorCode_SealedSenderSelfSend = 31,
  SignalErrorCode_InvalidKey = 40,
  SignalErrorCode_InvalidSignature = 41,
  SignalErrorCode_InvalidAttestationData = 42,
  SignalErrorCode_FingerprintVersionMismatch = 51,
  SignalErrorCode_FingerprintParsingError = 52,
  SignalErrorCode_UntrustedIdentity = 60,
  SignalErrorCode_InvalidKeyIdentifier = 70,
  SignalErrorCode_SessionNotFound = 80,
  SignalErrorCode_InvalidRegistrationId = 81,
  SignalErrorCode_InvalidSession = 82,
  SignalErrorCode_InvalidSenderKeySession = 83,
  SignalErrorCode_DuplicatedMessage = 90,
  SignalErrorCode_CallbackError = 100,
  SignalErrorCode_VerificationFailure = 110,
} SignalErrorCode;

/**
 * A wrapper around [`aes::Aes256Ctr`] that uses a smaller nonce and supports an initial counter.
 */
typedef struct SignalAes256Ctr32 SignalAes256Ctr32;

typedef struct SignalAes256GcmDecryption SignalAes256GcmDecryption;

typedef struct SignalAes256GcmEncryption SignalAes256GcmEncryption;

typedef struct SignalAes256GcmSiv SignalAes256GcmSiv;

typedef struct SignalCds2ClientState SignalCds2ClientState;

typedef struct SignalCiphertextMessage SignalCiphertextMessage;

typedef struct SignalDecryptionErrorMessage SignalDecryptionErrorMessage;

typedef struct SignalFingerprint SignalFingerprint;

typedef struct SignalHsmEnclaveClient SignalHsmEnclaveClient;

typedef struct SignalPlaintextContent SignalPlaintextContent;

typedef struct SignalPreKeyBundle SignalPreKeyBundle;

typedef struct SignalPreKeyRecord SignalPreKeyRecord;

typedef struct SignalPreKeySignalMessage SignalPreKeySignalMessage;

typedef struct SignalPrivateKey SignalPrivateKey;

/**
 * Represents a unique Signal client instance as `(<user ID>, <device ID>)` pair.
 */
typedef struct SignalProtocolAddress SignalProtocolAddress;

typedef struct SignalPublicKey SignalPublicKey;

typedef struct SignalSenderCertificate SignalSenderCertificate;

typedef struct SignalSenderKeyDistributionMessage SignalSenderKeyDistributionMessage;

typedef struct SignalSenderKeyMessage SignalSenderKeyMessage;

typedef struct SignalSenderKeyRecord SignalSenderKeyRecord;

typedef struct SignalServerCertificate SignalServerCertificate;

typedef struct SignalSessionRecord SignalSessionRecord;

/**
 * The top-level error type (opaquely) returned to C clients when something goes wrong.
 */
typedef struct SignalFfiError SignalFfiError;

typedef struct SignalMessage SignalMessage;

typedef struct SignalSignedPreKeyRecord SignalSignedPreKeyRecord;

typedef struct SignalUnidentifiedSenderMessageContent SignalUnidentifiedSenderMessageContent;

typedef struct {
  const unsigned char *base;
  uintptr_t length;
} SignalBorrowedBuffer;

typedef int (*SignalLoadSession)(void *store_ctx, SignalSessionRecord **recordp, const SignalProtocolAddress *address, void *ctx);

typedef int (*SignalStoreSession)(void *store_ctx, const SignalProtocolAddress *address, const SignalSessionRecord *record, void *ctx);

typedef struct {
  void *ctx;
  SignalLoadSession load_session;
  SignalStoreSession store_session;
} SignalSessionStore;

typedef int (*SignalGetIdentityKeyPair)(void *store_ctx, SignalPrivateKey **keyp, void *ctx);

typedef int (*SignalGetLocalRegistrationId)(void *store_ctx, uint32_t *idp, void *ctx);

typedef int (*SignalSaveIdentityKey)(void *store_ctx, const SignalProtocolAddress *address, const SignalPublicKey *public_key, void *ctx);

typedef int (*SignalGetIdentityKey)(void *store_ctx, SignalPublicKey **public_keyp, const SignalProtocolAddress *address, void *ctx);

typedef int (*SignalIsTrustedIdentity)(void *store_ctx, const SignalProtocolAddress *address, const SignalPublicKey *public_key, unsigned int direction, void *ctx);

typedef struct {
  void *ctx;
  SignalGetIdentityKeyPair get_identity_key_pair;
  SignalGetLocalRegistrationId get_local_registration_id;
  SignalSaveIdentityKey save_identity;
  SignalGetIdentityKey get_identity;
  SignalIsTrustedIdentity is_trusted_identity;
} SignalIdentityKeyStore;

typedef int (*SignalLoadPreKey)(void *store_ctx, SignalPreKeyRecord **recordp, uint32_t id, void *ctx);

typedef int (*SignalStorePreKey)(void *store_ctx, uint32_t id, const SignalPreKeyRecord *record, void *ctx);

typedef int (*SignalRemovePreKey)(void *store_ctx, uint32_t id, void *ctx);

typedef struct {
  void *ctx;
  SignalLoadPreKey load_pre_key;
  SignalStorePreKey store_pre_key;
  SignalRemovePreKey remove_pre_key;
} SignalPreKeyStore;

typedef int (*SignalLoadSignedPreKey)(void *store_ctx, SignalSignedPreKeyRecord **recordp, uint32_t id, void *ctx);

typedef int (*SignalStoreSignedPreKey)(void *store_ctx, uint32_t id, const SignalSignedPreKeyRecord *record, void *ctx);

typedef struct {
  void *ctx;
  SignalLoadSignedPreKey load_signed_pre_key;
  SignalStoreSignedPreKey store_signed_pre_key;
} SignalSignedPreKeyStore;

typedef bool (*SignalLogEnabledCallback)(const char *target, SignalLogLevel level);

typedef void (*SignalLogCallback)(const char *target, SignalLogLevel level, const char *file, uint32_t line, const char *message);

typedef void (*SignalLogFlushCallback)(void);

typedef struct {
  SignalLogEnabledCallback enabled;
  SignalLogCallback log;
  SignalLogFlushCallback flush;
} SignalFfiLogger;

typedef struct {
  unsigned char *base;
  uintptr_t length;
} SignalBorrowedMutableBuffer;

typedef struct {
  const SignalProtocolAddress *const *base;
  uintptr_t length;
} SignalBorrowedSliceOfProtocolAddress;

typedef struct {
  const SignalSessionRecord *const *base;
  uintptr_t length;
} SignalBorrowedSliceOfSessionRecord;

typedef int (*SignalLoadSenderKey)(void *store_ctx, SignalSenderKeyRecord**, const SignalProtocolAddress*, const uint8_t (*distribution_id)[16], void *ctx);

typedef int (*SignalStoreSenderKey)(void *store_ctx, const SignalProtocolAddress*, const uint8_t (*distribution_id)[16], const SignalSenderKeyRecord*, void *ctx);

typedef struct {
  void *ctx;
  SignalLoadSenderKey load_sender_key;
  SignalStoreSenderKey store_sender_key;
} SignalSenderKeyStore;

typedef uint8_t SignalRandomnessBytes[SignalRANDOMNESS_LEN];

void signal_print_ptr(const void *p);

void signal_free_string(const char *buf);

void signal_free_buffer(const unsigned char *buf, size_t buf_len);

SignalFfiError *signal_error_get_message(const SignalFfiError *err, const char **out);

SignalFfiError *signal_error_get_address(const SignalFfiError *err, SignalProtocolAddress **out);

SignalFfiError *signal_error_get_uuid(const SignalFfiError *err, uint8_t (*out)[16]);

uint32_t signal_error_get_type(const SignalFfiError *err);

void signal_error_free(SignalFfiError *err);

SignalFfiError *signal_identitykeypair_deserialize(SignalPrivateKey **private_key,
                                                   SignalPublicKey **public_key,
                                                   SignalBorrowedBuffer input);

SignalFfiError *signal_sealed_session_cipher_decrypt(const unsigned char **out,
                                                     size_t *out_len,
                                                     const char **sender_e164,
                                                     const char **sender_uuid,
                                                     uint32_t *sender_device_id,
                                                     SignalBorrowedBuffer ctext,
                                                     const SignalPublicKey *trust_root,
                                                     uint64_t timestamp,
                                                     const char *local_e164,
                                                     const char *local_uuid,
                                                     unsigned int local_device_id,
                                                     const SignalSessionStore *session_store,
                                                     const SignalIdentityKeyStore *identity_store,
                                                     const SignalPreKeyStore *prekey_store,
                                                     const SignalSignedPreKeyStore *signed_prekey_store,
                                                     void *ctx);

void signal_init_logger(SignalLogLevel max_level, SignalFfiLogger logger);

SignalFfiError *signal_aes256_gcm_siv_destroy(SignalAes256GcmSiv *p);

SignalFfiError *signal_aes256_ctr32_destroy(SignalAes256Ctr32 *p);

SignalFfiError *signal_aes256_gcm_encryption_destroy(SignalAes256GcmEncryption *p);

SignalFfiError *signal_aes256_gcm_decryption_destroy(SignalAes256GcmDecryption *p);

SignalFfiError *signal_aes256_ctr32_new(SignalAes256Ctr32 **out,
                                        SignalBorrowedBuffer key,
                                        SignalBorrowedBuffer nonce,
                                        uint32_t initial_ctr);

SignalFfiError *signal_aes256_ctr32_process(SignalAes256Ctr32 *ctr,
                                            SignalBorrowedMutableBuffer data,
                                            uint32_t offset,
                                            uint32_t length);

SignalFfiError *signal_aes256_gcm_encryption_new(SignalAes256GcmEncryption **out,
                                                 SignalBorrowedBuffer key,
                                                 SignalBorrowedBuffer nonce,
                                                 SignalBorrowedBuffer associated_data);

SignalFfiError *signal_aes256_gcm_encryption_update(SignalAes256GcmEncryption *gcm,
                                                    SignalBorrowedMutableBuffer data,
                                                    uint32_t offset,
                                                    uint32_t length);

SignalFfiError *signal_aes256_gcm_encryption_compute_tag(const unsigned char **out,
                                                         size_t *out_len,
                                                         SignalAes256GcmEncryption *gcm);

SignalFfiError *signal_aes256_gcm_decryption_new(SignalAes256GcmDecryption **out,
                                                 SignalBorrowedBuffer key,
                                                 SignalBorrowedBuffer nonce,
                                                 SignalBorrowedBuffer associated_data);

SignalFfiError *signal_aes256_gcm_decryption_update(SignalAes256GcmDecryption *gcm,
                                                    SignalBorrowedMutableBuffer data,
                                                    uint32_t offset,
                                                    uint32_t length);

SignalFfiError *signal_aes256_gcm_decryption_verify_tag(bool *out,
                                                        SignalAes256GcmDecryption *gcm,
                                                        SignalBorrowedBuffer tag);

SignalFfiError *signal_aes256_gcm_siv_new(SignalAes256GcmSiv **out, SignalBorrowedBuffer key);

SignalFfiError *signal_aes256_gcm_siv_encrypt(const unsigned char **out,
                                              size_t *out_len,
                                              const SignalAes256GcmSiv *aes_gcm_siv_obj,
                                              SignalBorrowedBuffer ptext,
                                              SignalBorrowedBuffer nonce,
                                              SignalBorrowedBuffer associated_data);

SignalFfiError *signal_aes256_gcm_siv_decrypt(const unsigned char **out,
                                              size_t *out_len,
                                              const SignalAes256GcmSiv *aes_gcm_siv,
                                              SignalBorrowedBuffer ctext,
                                              SignalBorrowedBuffer nonce,
                                              SignalBorrowedBuffer associated_data);

SignalFfiError *signal_ciphertext_message_destroy(SignalCiphertextMessage *p);

SignalFfiError *signal_decryption_error_message_destroy(SignalDecryptionErrorMessage *p);

SignalFfiError *signal_decryption_error_message_clone(SignalDecryptionErrorMessage **new_obj,
                                                      const SignalDecryptionErrorMessage *obj);

SignalFfiError *signal_fingerprint_destroy(SignalFingerprint *p);

SignalFfiError *signal_fingerprint_clone(SignalFingerprint **new_obj, const SignalFingerprint *obj);

SignalFfiError *signal_plaintext_content_destroy(SignalPlaintextContent *p);

SignalFfiError *signal_plaintext_content_clone(SignalPlaintextContent **new_obj,
                                               const SignalPlaintextContent *obj);

SignalFfiError *signal_pre_key_bundle_destroy(SignalPreKeyBundle *p);

SignalFfiError *signal_pre_key_bundle_clone(SignalPreKeyBundle **new_obj,
                                            const SignalPreKeyBundle *obj);

SignalFfiError *signal_pre_key_record_destroy(SignalPreKeyRecord *p);

SignalFfiError *signal_pre_key_record_clone(SignalPreKeyRecord **new_obj,
                                            const SignalPreKeyRecord *obj);

SignalFfiError *signal_pre_key_signal_message_destroy(SignalPreKeySignalMessage *p);

SignalFfiError *signal_pre_key_signal_message_clone(SignalPreKeySignalMessage **new_obj,
                                                    const SignalPreKeySignalMessage *obj);

SignalFfiError *signal_privatekey_destroy(SignalPrivateKey *p);

SignalFfiError *signal_privatekey_clone(SignalPrivateKey **new_obj, const SignalPrivateKey *obj);

SignalFfiError *signal_address_destroy(SignalProtocolAddress *p);

SignalFfiError *signal_address_clone(SignalProtocolAddress **new_obj,
                                     const SignalProtocolAddress *obj);

SignalFfiError *signal_publickey_destroy(SignalPublicKey *p);

SignalFfiError *signal_publickey_clone(SignalPublicKey **new_obj, const SignalPublicKey *obj);

SignalFfiError *signal_sender_certificate_destroy(SignalSenderCertificate *p);

SignalFfiError *signal_sender_certificate_clone(SignalSenderCertificate **new_obj,
                                                const SignalSenderCertificate *obj);

SignalFfiError *signal_sender_key_distribution_message_destroy(SignalSenderKeyDistributionMessage *p);

SignalFfiError *signal_sender_key_distribution_message_clone(SignalSenderKeyDistributionMessage **new_obj,
                                                             const SignalSenderKeyDistributionMessage *obj);

SignalFfiError *signal_sender_key_message_destroy(SignalSenderKeyMessage *p);

SignalFfiError *signal_sender_key_message_clone(SignalSenderKeyMessage **new_obj,
                                                const SignalSenderKeyMessage *obj);

SignalFfiError *signal_sender_key_record_destroy(SignalSenderKeyRecord *p);

SignalFfiError *signal_sender_key_record_clone(SignalSenderKeyRecord **new_obj,
                                               const SignalSenderKeyRecord *obj);

SignalFfiError *signal_server_certificate_destroy(SignalServerCertificate *p);

SignalFfiError *signal_server_certificate_clone(SignalServerCertificate **new_obj,
                                                const SignalServerCertificate *obj);

SignalFfiError *signal_session_record_destroy(SignalSessionRecord *p);

SignalFfiError *signal_session_record_clone(SignalSessionRecord **new_obj,
                                            const SignalSessionRecord *obj);

SignalFfiError *signal_message_destroy(SignalMessage *p);

SignalFfiError *signal_message_clone(SignalMessage **new_obj, const SignalMessage *obj);

SignalFfiError *signal_signed_pre_key_record_destroy(SignalSignedPreKeyRecord *p);

SignalFfiError *signal_signed_pre_key_record_clone(SignalSignedPreKeyRecord **new_obj,
                                                   const SignalSignedPreKeyRecord *obj);

SignalFfiError *signal_unidentified_sender_message_content_destroy(SignalUnidentifiedSenderMessageContent *p);

SignalFfiError *signal_hkdf_derive(SignalBorrowedMutableBuffer output,
                                   SignalBorrowedBuffer ikm,
                                   SignalBorrowedBuffer label,
                                   SignalBorrowedBuffer salt);

SignalFfiError *signal_address_new(SignalProtocolAddress **out,
                                   const char *name,
                                   uint32_t device_id);

SignalFfiError *signal_publickey_deserialize(SignalPublicKey **out, SignalBorrowedBuffer data);

SignalFfiError *signal_publickey_serialize(const unsigned char **out,
                                           size_t *out_len,
                                           const SignalPublicKey *obj);

SignalFfiError *signal_publickey_get_public_key_bytes(const unsigned char **out,
                                                      size_t *out_len,
                                                      const SignalPublicKey *obj);

SignalFfiError *signal_address_get_device_id(uint32_t *out, const SignalProtocolAddress *obj);

SignalFfiError *signal_address_get_name(const char **out, const SignalProtocolAddress *obj);

SignalFfiError *signal_publickey_compare(int32_t *out,
                                         const SignalPublicKey *key1,
                                         const SignalPublicKey *key2);

SignalFfiError *signal_publickey_verify(bool *out,
                                        const SignalPublicKey *key,
                                        SignalBorrowedBuffer message,
                                        SignalBorrowedBuffer signature);

SignalFfiError *signal_privatekey_deserialize(SignalPrivateKey **out, SignalBorrowedBuffer data);

SignalFfiError *signal_privatekey_serialize(const unsigned char **out,
                                            size_t *out_len,
                                            const SignalPrivateKey *obj);

SignalFfiError *signal_privatekey_generate(SignalPrivateKey **out);

SignalFfiError *signal_privatekey_get_public_key(SignalPublicKey **out, const SignalPrivateKey *k);

SignalFfiError *signal_privatekey_sign(const unsigned char **out,
                                       size_t *out_len,
                                       const SignalPrivateKey *key,
                                       SignalBorrowedBuffer message);

SignalFfiError *signal_privatekey_agree(const unsigned char **out,
                                        size_t *out_len,
                                        const SignalPrivateKey *private_key,
                                        const SignalPublicKey *public_key);

SignalFfiError *signal_identitykeypair_serialize(const unsigned char **out,
                                                 size_t *out_len,
                                                 const SignalPublicKey *public_key,
                                                 const SignalPrivateKey *private_key);

SignalFfiError *signal_identitykeypair_sign_alternate_identity(const unsigned char **out,
                                                               size_t *out_len,
                                                               const SignalPublicKey *public_key,
                                                               const SignalPrivateKey *private_key,
                                                               const SignalPublicKey *other_identity);

SignalFfiError *signal_identitykey_verify_alternate_identity(bool *out,
                                                             const SignalPublicKey *public_key,
                                                             const SignalPublicKey *other_identity,
                                                             SignalBorrowedBuffer signature);

SignalFfiError *signal_fingerprint_new(SignalFingerprint **out,
                                       uint32_t iterations,
                                       uint32_t version,
                                       SignalBorrowedBuffer local_identifier,
                                       const SignalPublicKey *local_key,
                                       SignalBorrowedBuffer remote_identifier,
                                       const SignalPublicKey *remote_key);

SignalFfiError *signal_fingerprint_scannable_encoding(const unsigned char **out,
                                                      size_t *out_len,
                                                      const SignalFingerprint *obj);

SignalFfiError *signal_fingerprint_display_string(const char **out, const SignalFingerprint *obj);

SignalFfiError *signal_fingerprint_compare(bool *out,
                                           SignalBorrowedBuffer fprint1,
                                           SignalBorrowedBuffer fprint2);

SignalFfiError *signal_message_deserialize(SignalMessage **out, SignalBorrowedBuffer data);

SignalFfiError *signal_message_get_body(const unsigned char **out,
                                        size_t *out_len,
                                        const SignalMessage *obj);

SignalFfiError *signal_message_get_serialized(const unsigned char **out,
                                              size_t *out_len,
                                              const SignalMessage *obj);

SignalFfiError *signal_message_get_counter(uint32_t *out, const SignalMessage *obj);

SignalFfiError *signal_message_get_message_version(uint32_t *out, const SignalMessage *obj);

SignalFfiError *signal_message_new(SignalMessage **out,
                                   uint8_t message_version,
                                   SignalBorrowedBuffer mac_key,
                                   const SignalPublicKey *sender_ratchet_key,
                                   uint32_t counter,
                                   uint32_t previous_counter,
                                   SignalBorrowedBuffer ciphertext,
                                   const SignalPublicKey *sender_identity_key,
                                   const SignalPublicKey *receiver_identity_key);

SignalFfiError *signal_message_verify_mac(bool *out,
                                          const SignalMessage *msg,
                                          const SignalPublicKey *sender_identity_key,
                                          const SignalPublicKey *receiver_identity_key,
                                          SignalBorrowedBuffer mac_key);

SignalFfiError *signal_message_get_sender_ratchet_key(SignalPublicKey **out,
                                                      const SignalMessage *m);

SignalFfiError *signal_pre_key_signal_message_new(SignalPreKeySignalMessage **out,
                                                  uint8_t message_version,
                                                  uint32_t registration_id,
                                                  uint32_t pre_key_id,
                                                  uint32_t signed_pre_key_id,
                                                  const SignalPublicKey *base_key,
                                                  const SignalPublicKey *identity_key,
                                                  const SignalMessage *signal_message);

SignalFfiError *signal_pre_key_signal_message_get_base_key(SignalPublicKey **out,
                                                           const SignalPreKeySignalMessage *m);

SignalFfiError *signal_pre_key_signal_message_get_identity_key(SignalPublicKey **out,
                                                               const SignalPreKeySignalMessage *m);

SignalFfiError *signal_pre_key_signal_message_get_signal_message(SignalMessage **out,
                                                                 const SignalPreKeySignalMessage *m);

SignalFfiError *signal_pre_key_signal_message_deserialize(SignalPreKeySignalMessage **out,
                                                          SignalBorrowedBuffer data);

SignalFfiError *signal_pre_key_signal_message_serialize(const unsigned char **out,
                                                        size_t *out_len,
                                                        const SignalPreKeySignalMessage *obj);

SignalFfiError *signal_pre_key_signal_message_get_registration_id(uint32_t *out,
                                                                  const SignalPreKeySignalMessage *obj);

SignalFfiError *signal_pre_key_signal_message_get_signed_pre_key_id(uint32_t *out,
                                                                    const SignalPreKeySignalMessage *obj);

SignalFfiError *signal_pre_key_signal_message_get_pre_key_id(uint32_t *out,
                                                             const SignalPreKeySignalMessage *obj);

SignalFfiError *signal_pre_key_signal_message_get_version(uint32_t *out,
                                                          const SignalPreKeySignalMessage *obj);

SignalFfiError *signal_sender_key_message_deserialize(SignalSenderKeyMessage **out,
                                                      SignalBorrowedBuffer data);

SignalFfiError *signal_sender_key_message_get_cipher_text(const unsigned char **out,
                                                          size_t *out_len,
                                                          const SignalSenderKeyMessage *obj);

SignalFfiError *signal_sender_key_message_serialize(const unsigned char **out,
                                                    size_t *out_len,
                                                    const SignalSenderKeyMessage *obj);

SignalFfiError *signal_sender_key_message_get_distribution_id(uint8_t (*out)[16],
                                                              const SignalSenderKeyMessage *obj);

SignalFfiError *signal_sender_key_message_get_chain_id(uint32_t *out,
                                                       const SignalSenderKeyMessage *obj);

SignalFfiError *signal_sender_key_message_get_iteration(uint32_t *out,
                                                        const SignalSenderKeyMessage *obj);

SignalFfiError *signal_sender_key_message_new(SignalSenderKeyMessage **out,
                                              uint8_t message_version,
                                              const uint8_t (*distribution_id)[16],
                                              uint32_t chain_id,
                                              uint32_t iteration,
                                              SignalBorrowedBuffer ciphertext,
                                              const SignalPrivateKey *pk);

SignalFfiError *signal_sender_key_message_verify_signature(bool *out,
                                                           const SignalSenderKeyMessage *skm,
                                                           const SignalPublicKey *pubkey);

SignalFfiError *signal_sender_key_distribution_message_deserialize(SignalSenderKeyDistributionMessage **out,
                                                                   SignalBorrowedBuffer data);

SignalFfiError *signal_sender_key_distribution_message_get_chain_key(const unsigned char **out,
                                                                     size_t *out_len,
                                                                     const SignalSenderKeyDistributionMessage *obj);

SignalFfiError *signal_sender_key_distribution_message_serialize(const unsigned char **out,
                                                                 size_t *out_len,
                                                                 const SignalSenderKeyDistributionMessage *obj);

SignalFfiError *signal_sender_key_distribution_message_get_distribution_id(uint8_t (*out)[16],
                                                                           const SignalSenderKeyDistributionMessage *obj);

SignalFfiError *signal_sender_key_distribution_message_get_chain_id(uint32_t *out,
                                                                    const SignalSenderKeyDistributionMessage *obj);

SignalFfiError *signal_sender_key_distribution_message_get_iteration(uint32_t *out,
                                                                     const SignalSenderKeyDistributionMessage *obj);

SignalFfiError *signal_sender_key_distribution_message_new(SignalSenderKeyDistributionMessage **out,
                                                           uint8_t message_version,
                                                           const uint8_t (*distribution_id)[16],
                                                           uint32_t chain_id,
                                                           uint32_t iteration,
                                                           SignalBorrowedBuffer chainkey,
                                                           const SignalPublicKey *pk);

SignalFfiError *signal_sender_key_distribution_message_get_signature_key(SignalPublicKey **out,
                                                                         const SignalSenderKeyDistributionMessage *m);

SignalFfiError *signal_decryption_error_message_deserialize(SignalDecryptionErrorMessage **out,
                                                            SignalBorrowedBuffer data);

SignalFfiError *signal_decryption_error_message_get_timestamp(uint64_t *out,
                                                              const SignalDecryptionErrorMessage *obj);

SignalFfiError *signal_decryption_error_message_get_device_id(uint32_t *out,
                                                              const SignalDecryptionErrorMessage *obj);

SignalFfiError *signal_decryption_error_message_serialize(const unsigned char **out,
                                                          size_t *out_len,
                                                          const SignalDecryptionErrorMessage *obj);

SignalFfiError *signal_decryption_error_message_get_ratchet_key(SignalPublicKey **out,
                                                                const SignalDecryptionErrorMessage *m);

SignalFfiError *signal_decryption_error_message_for_original_message(SignalDecryptionErrorMessage **out,
                                                                     SignalBorrowedBuffer original_bytes,
                                                                     uint8_t original_type,
                                                                     uint64_t original_timestamp,
                                                                     uint32_t original_sender_device_id);

SignalFfiError *signal_decryption_error_message_extract_from_serialized_content(SignalDecryptionErrorMessage **out,
                                                                                SignalBorrowedBuffer bytes);

SignalFfiError *signal_plaintext_content_deserialize(SignalPlaintextContent **out,
                                                     SignalBorrowedBuffer data);

SignalFfiError *signal_plaintext_content_serialize(const unsigned char **out,
                                                   size_t *out_len,
                                                   const SignalPlaintextContent *obj);

SignalFfiError *signal_plaintext_content_get_body(const unsigned char **out,
                                                  size_t *out_len,
                                                  const SignalPlaintextContent *obj);

SignalFfiError *signal_plaintext_content_from_decryption_error_message(SignalPlaintextContent **out,
                                                                       const SignalDecryptionErrorMessage *m);

SignalFfiError *signal_pre_key_bundle_new(SignalPreKeyBundle **out,
                                          uint32_t registration_id,
                                          uint32_t device_id,
                                          uint32_t prekey_id,
                                          const SignalPublicKey *prekey,
                                          uint32_t signed_prekey_id,
                                          const SignalPublicKey *signed_prekey,
                                          SignalBorrowedBuffer signed_prekey_signature,
                                          const SignalPublicKey *identity_key);

SignalFfiError *signal_pre_key_bundle_get_identity_key(SignalPublicKey **out,
                                                       const SignalPreKeyBundle *p);

SignalFfiError *signal_pre_key_bundle_get_signed_pre_key_signature(const unsigned char **out,
                                                                   size_t *out_len,
                                                                   const SignalPreKeyBundle *obj);

SignalFfiError *signal_pre_key_bundle_get_registration_id(uint32_t *out,
                                                          const SignalPreKeyBundle *obj);

SignalFfiError *signal_pre_key_bundle_get_device_id(uint32_t *out, const SignalPreKeyBundle *obj);

SignalFfiError *signal_pre_key_bundle_get_signed_pre_key_id(uint32_t *out,
                                                            const SignalPreKeyBundle *obj);

SignalFfiError *signal_pre_key_bundle_get_pre_key_id(uint32_t *out, const SignalPreKeyBundle *obj);

SignalFfiError *signal_pre_key_bundle_get_pre_key_public(SignalPublicKey **out,
                                                         const SignalPreKeyBundle *obj);

SignalFfiError *signal_pre_key_bundle_get_signed_pre_key_public(SignalPublicKey **out,
                                                                const SignalPreKeyBundle *obj);

SignalFfiError *signal_signed_pre_key_record_deserialize(SignalSignedPreKeyRecord **out,
                                                         SignalBorrowedBuffer data);

SignalFfiError *signal_signed_pre_key_record_get_signature(const unsigned char **out,
                                                           size_t *out_len,
                                                           const SignalSignedPreKeyRecord *obj);

SignalFfiError *signal_signed_pre_key_record_serialize(const unsigned char **out,
                                                       size_t *out_len,
                                                       const SignalSignedPreKeyRecord *obj);

SignalFfiError *signal_signed_pre_key_record_get_id(uint32_t *out,
                                                    const SignalSignedPreKeyRecord *obj);

SignalFfiError *signal_signed_pre_key_record_get_timestamp(uint64_t *out,
                                                           const SignalSignedPreKeyRecord *obj);

SignalFfiError *signal_signed_pre_key_record_get_public_key(SignalPublicKey **out,
                                                            const SignalSignedPreKeyRecord *obj);

SignalFfiError *signal_signed_pre_key_record_get_private_key(SignalPrivateKey **out,
                                                             const SignalSignedPreKeyRecord *obj);

SignalFfiError *signal_signed_pre_key_record_new(SignalSignedPreKeyRecord **out,
                                                 uint32_t id,
                                                 uint64_t timestamp,
                                                 const SignalPublicKey *pub_key,
                                                 const SignalPrivateKey *priv_key,
                                                 SignalBorrowedBuffer signature);

SignalFfiError *signal_pre_key_record_deserialize(SignalPreKeyRecord **out,
                                                  SignalBorrowedBuffer data);

SignalFfiError *signal_pre_key_record_serialize(const unsigned char **out,
                                                size_t *out_len,
                                                const SignalPreKeyRecord *obj);

SignalFfiError *signal_pre_key_record_get_id(uint32_t *out, const SignalPreKeyRecord *obj);

SignalFfiError *signal_pre_key_record_get_public_key(SignalPublicKey **out,
                                                     const SignalPreKeyRecord *obj);

SignalFfiError *signal_pre_key_record_get_private_key(SignalPrivateKey **out,
                                                      const SignalPreKeyRecord *obj);

SignalFfiError *signal_pre_key_record_new(SignalPreKeyRecord **out,
                                          uint32_t id,
                                          const SignalPublicKey *pub_key,
                                          const SignalPrivateKey *priv_key);

SignalFfiError *signal_sender_key_record_deserialize(SignalSenderKeyRecord **out,
                                                     SignalBorrowedBuffer data);

SignalFfiError *signal_sender_key_record_serialize(const unsigned char **out,
                                                   size_t *out_len,
                                                   const SignalSenderKeyRecord *obj);

SignalFfiError *signal_server_certificate_deserialize(SignalServerCertificate **out,
                                                      SignalBorrowedBuffer data);

SignalFfiError *signal_server_certificate_get_serialized(const unsigned char **out,
                                                         size_t *out_len,
                                                         const SignalServerCertificate *obj);

SignalFfiError *signal_server_certificate_get_certificate(const unsigned char **out,
                                                          size_t *out_len,
                                                          const SignalServerCertificate *obj);

SignalFfiError *signal_server_certificate_get_signature(const unsigned char **out,
                                                        size_t *out_len,
                                                        const SignalServerCertificate *obj);

SignalFfiError *signal_server_certificate_get_key_id(uint32_t *out,
                                                     const SignalServerCertificate *obj);

SignalFfiError *signal_server_certificate_get_key(SignalPublicKey **out,
                                                  const SignalServerCertificate *obj);

SignalFfiError *signal_server_certificate_new(SignalServerCertificate **out,
                                              uint32_t key_id,
                                              const SignalPublicKey *server_key,
                                              const SignalPrivateKey *trust_root);

SignalFfiError *signal_sender_certificate_deserialize(SignalSenderCertificate **out,
                                                      SignalBorrowedBuffer data);

SignalFfiError *signal_sender_certificate_get_serialized(const unsigned char **out,
                                                         size_t *out_len,
                                                         const SignalSenderCertificate *obj);

SignalFfiError *signal_sender_certificate_get_certificate(const unsigned char **out,
                                                          size_t *out_len,
                                                          const SignalSenderCertificate *obj);

SignalFfiError *signal_sender_certificate_get_signature(const unsigned char **out,
                                                        size_t *out_len,
                                                        const SignalSenderCertificate *obj);

SignalFfiError *signal_sender_certificate_get_sender_uuid(const char **out,
                                                          const SignalSenderCertificate *obj);

SignalFfiError *signal_sender_certificate_get_sender_e164(const char **out,
                                                          const SignalSenderCertificate *obj);

SignalFfiError *signal_sender_certificate_get_expiration(uint64_t *out,
                                                         const SignalSenderCertificate *obj);

SignalFfiError *signal_sender_certificate_get_device_id(uint32_t *out,
                                                        const SignalSenderCertificate *obj);

SignalFfiError *signal_sender_certificate_get_key(SignalPublicKey **out,
                                                  const SignalSenderCertificate *obj);

SignalFfiError *signal_sender_certificate_validate(bool *out,
                                                   const SignalSenderCertificate *cert,
                                                   const SignalPublicKey *key,
                                                   uint64_t time);

SignalFfiError *signal_sender_certificate_get_server_certificate(SignalServerCertificate **out,
                                                                 const SignalSenderCertificate *cert);

SignalFfiError *signal_sender_certificate_new(SignalSenderCertificate **out,
                                              const char *sender_uuid,
                                              const char *sender_e164,
                                              uint32_t sender_device_id,
                                              const SignalPublicKey *sender_key,
                                              uint64_t expiration,
                                              const SignalServerCertificate *signer_cert,
                                              const SignalPrivateKey *signer_key);

SignalFfiError *signal_unidentified_sender_message_content_deserialize(SignalUnidentifiedSenderMessageContent **out,
                                                                       SignalBorrowedBuffer data);

SignalFfiError *signal_unidentified_sender_message_content_serialize(const unsigned char **out,
                                                                     size_t *out_len,
                                                                     const SignalUnidentifiedSenderMessageContent *obj);

SignalFfiError *signal_unidentified_sender_message_content_get_contents(const unsigned char **out,
                                                                        size_t *out_len,
                                                                        const SignalUnidentifiedSenderMessageContent *obj);

SignalFfiError *signal_unidentified_sender_message_content_get_group_id(const unsigned char **out,
                                                                        size_t *out_len,
                                                                        const SignalUnidentifiedSenderMessageContent *obj);

SignalFfiError *signal_unidentified_sender_message_content_get_sender_cert(SignalSenderCertificate **out,
                                                                           const SignalUnidentifiedSenderMessageContent *m);

SignalFfiError *signal_unidentified_sender_message_content_get_msg_type(uint8_t *out,
                                                                        const SignalUnidentifiedSenderMessageContent *m);

SignalFfiError *signal_unidentified_sender_message_content_get_content_hint(uint32_t *out,
                                                                            const SignalUnidentifiedSenderMessageContent *m);

SignalFfiError *signal_unidentified_sender_message_content_new(SignalUnidentifiedSenderMessageContent **out,
                                                               const SignalCiphertextMessage *message,
                                                               const SignalSenderCertificate *sender,
                                                               uint32_t content_hint,
                                                               SignalBorrowedBuffer group_id);

SignalFfiError *signal_ciphertext_message_type(uint8_t *out, const SignalCiphertextMessage *msg);

SignalFfiError *signal_ciphertext_message_serialize(const unsigned char **out,
                                                    size_t *out_len,
                                                    const SignalCiphertextMessage *obj);

SignalFfiError *signal_ciphertext_message_from_plaintext_content(SignalCiphertextMessage **out,
                                                                 const SignalPlaintextContent *m);

SignalFfiError *signal_session_record_archive_current_state(SignalSessionRecord *session_record);

SignalFfiError *signal_session_record_current_ratchet_key_matches(bool *out,
                                                                  const SignalSessionRecord *s,
                                                                  const SignalPublicKey *key);

SignalFfiError *signal_session_record_set_needs_pni_signature(SignalSessionRecord *s,
                                                              bool needs_pni_signature);

SignalFfiError *signal_session_record_has_current_state(bool *out, const SignalSessionRecord *obj);

SignalFfiError *signal_session_record_needs_pni_signature(bool *out,
                                                          const SignalSessionRecord *obj);

SignalFfiError *signal_session_record_deserialize(SignalSessionRecord **out,
                                                  SignalBorrowedBuffer data);

SignalFfiError *signal_session_record_serialize(const unsigned char **out,
                                                size_t *out_len,
                                                const SignalSessionRecord *obj);

SignalFfiError *signal_session_record_get_local_registration_id(uint32_t *out,
                                                                const SignalSessionRecord *obj);

SignalFfiError *signal_session_record_get_remote_registration_id(uint32_t *out,
                                                                 const SignalSessionRecord *obj);

SignalFfiError *signal_process_prekey_bundle(const SignalPreKeyBundle *bundle,
                                             const SignalProtocolAddress *protocol_address,
                                             const SignalSessionStore *session_store,
                                             const SignalIdentityKeyStore *identity_key_store,
                                             void *ctx);

SignalFfiError *signal_encrypt_message(SignalCiphertextMessage **out,
                                       SignalBorrowedBuffer ptext,
                                       const SignalProtocolAddress *protocol_address,
                                       const SignalSessionStore *session_store,
                                       const SignalIdentityKeyStore *identity_key_store,
                                       void *ctx);

SignalFfiError *signal_decrypt_message(const unsigned char **out,
                                       size_t *out_len,
                                       const SignalMessage *message,
                                       const SignalProtocolAddress *protocol_address,
                                       const SignalSessionStore *session_store,
                                       const SignalIdentityKeyStore *identity_key_store,
                                       void *ctx);

SignalFfiError *signal_decrypt_pre_key_message(const unsigned char **out,
                                               size_t *out_len,
                                               const SignalPreKeySignalMessage *message,
                                               const SignalProtocolAddress *protocol_address,
                                               const SignalSessionStore *session_store,
                                               const SignalIdentityKeyStore *identity_key_store,
                                               const SignalPreKeyStore *prekey_store,
                                               const SignalSignedPreKeyStore *signed_prekey_store,
                                               void *ctx);

SignalFfiError *signal_sealed_session_cipher_encrypt(const unsigned char **out,
                                                     size_t *out_len,
                                                     const SignalProtocolAddress *destination,
                                                     const SignalUnidentifiedSenderMessageContent *content,
                                                     const SignalIdentityKeyStore *identity_key_store,
                                                     void *ctx);

SignalFfiError *signal_sealed_sender_multi_recipient_encrypt(const unsigned char **out,
                                                             size_t *out_len,
                                                             SignalBorrowedSliceOfProtocolAddress recipients,
                                                             SignalBorrowedSliceOfSessionRecord recipient_sessions,
                                                             const SignalUnidentifiedSenderMessageContent *content,
                                                             const SignalIdentityKeyStore *identity_key_store,
                                                             void *ctx);

SignalFfiError *signal_sealed_sender_multi_recipient_message_for_single_recipient(const unsigned char **out,
                                                                                  size_t *out_len,
                                                                                  SignalBorrowedBuffer encoded_multi_recipient_message);

SignalFfiError *signal_sealed_session_cipher_decrypt_to_usmc(SignalUnidentifiedSenderMessageContent **out,
                                                             SignalBorrowedBuffer ctext,
                                                             const SignalIdentityKeyStore *identity_store,
                                                             void *ctx);

SignalFfiError *signal_sender_key_distribution_message_create(SignalSenderKeyDistributionMessage **out,
                                                              const SignalProtocolAddress *sender,
                                                              const uint8_t (*distribution_id)[16],
                                                              const SignalSenderKeyStore *store,
                                                              void *ctx);

SignalFfiError *signal_process_sender_key_distribution_message(const SignalProtocolAddress *sender,
                                                               const SignalSenderKeyDistributionMessage *sender_key_distribution_message,
                                                               const SignalSenderKeyStore *store,
                                                               void *ctx);

SignalFfiError *signal_group_encrypt_message(SignalCiphertextMessage **out,
                                             const SignalProtocolAddress *sender,
                                             const uint8_t (*distribution_id)[16],
                                             SignalBorrowedBuffer message,
                                             const SignalSenderKeyStore *store,
                                             void *ctx);

SignalFfiError *signal_group_decrypt_message(const unsigned char **out,
                                             size_t *out_len,
                                             const SignalProtocolAddress *sender,
                                             SignalBorrowedBuffer message,
                                             const SignalSenderKeyStore *store,
                                             void *ctx);

SignalFfiError *signal_device_transfer_generate_private_key(const unsigned char **out,
                                                            size_t *out_len);

SignalFfiError *signal_device_transfer_generate_certificate(const unsigned char **out,
                                                            size_t *out_len,
                                                            SignalBorrowedBuffer private_key,
                                                            const char *name,
                                                            uint32_t days_to_expire);

SignalFfiError *signal_cds2_client_state_destroy(SignalCds2ClientState *p);

SignalFfiError *signal_cds2_client_state_new(SignalCds2ClientState **out,
                                             SignalBorrowedBuffer mrenclave,
                                             SignalBorrowedBuffer ca_cert,
                                             SignalBorrowedBuffer attestation_msg,
                                             uint64_t earliest_valid_timestamp);

SignalFfiError *signal_cds2_client_state_initial_request(const unsigned char **out,
                                                         size_t *out_len,
                                                         const SignalCds2ClientState *obj);

SignalFfiError *signal_cds2_client_state_complete_handshake(SignalCds2ClientState *cli,
                                                            SignalBorrowedBuffer handshake_received);

SignalFfiError *signal_cds2_client_state_established_send(const unsigned char **out,
                                                          size_t *out_len,
                                                          SignalCds2ClientState *cli,
                                                          SignalBorrowedBuffer plaintext_to_send);

SignalFfiError *signal_cds2_client_state_established_recv(const unsigned char **out,
                                                          size_t *out_len,
                                                          SignalCds2ClientState *cli,
                                                          SignalBorrowedBuffer received_ciphertext);

SignalFfiError *signal_hsm_enclave_client_destroy(SignalHsmEnclaveClient *p);

SignalFfiError *signal_hsm_enclave_client_new(SignalHsmEnclaveClient **out,
                                              SignalBorrowedBuffer trusted_public_key,
                                              SignalBorrowedBuffer trusted_code_hashes);

SignalFfiError *signal_hsm_enclave_client_initial_request(const unsigned char **out,
                                                          size_t *out_len,
                                                          const SignalHsmEnclaveClient *obj);

SignalFfiError *signal_hsm_enclave_client_complete_handshake(SignalHsmEnclaveClient *cli,
                                                             SignalBorrowedBuffer handshake_received);

SignalFfiError *signal_hsm_enclave_client_established_send(const unsigned char **out,
                                                           size_t *out_len,
                                                           SignalHsmEnclaveClient *cli,
                                                           SignalBorrowedBuffer plaintext_to_send);

SignalFfiError *signal_hsm_enclave_client_established_recv(const unsigned char **out,
                                                           size_t *out_len,
                                                           SignalHsmEnclaveClient *cli,
                                                           SignalBorrowedBuffer received_ciphertext);

SignalFfiError *signal_auth_credential_check_valid_contents(SignalBorrowedBuffer buffer);

SignalFfiError *signal_auth_credential_response_check_valid_contents(SignalBorrowedBuffer buffer);

SignalFfiError *signal_group_master_key_check_valid_contents(SignalBorrowedBuffer buffer);

SignalFfiError *signal_group_public_params_check_valid_contents(SignalBorrowedBuffer buffer);

SignalFfiError *signal_group_secret_params_check_valid_contents(SignalBorrowedBuffer buffer);

SignalFfiError *signal_pni_credential_check_valid_contents(SignalBorrowedBuffer buffer);

SignalFfiError *signal_pni_credential_request_context_check_valid_contents(SignalBorrowedBuffer buffer);

SignalFfiError *signal_pni_credential_response_check_valid_contents(SignalBorrowedBuffer buffer);

SignalFfiError *signal_profile_key_check_valid_contents(SignalBorrowedBuffer buffer);

SignalFfiError *signal_profile_key_ciphertext_check_valid_contents(SignalBorrowedBuffer buffer);

SignalFfiError *signal_profile_key_commitment_check_valid_contents(SignalBorrowedBuffer buffer);

SignalFfiError *signal_profile_key_credential_check_valid_contents(SignalBorrowedBuffer buffer);

SignalFfiError *signal_profile_key_credential_request_check_valid_contents(SignalBorrowedBuffer buffer);

SignalFfiError *signal_profile_key_credential_request_context_check_valid_contents(SignalBorrowedBuffer buffer);

SignalFfiError *signal_profile_key_credential_response_check_valid_contents(SignalBorrowedBuffer buffer);

SignalFfiError *signal_receipt_credential_check_valid_contents(SignalBorrowedBuffer buffer);

SignalFfiError *signal_receipt_credential_presentation_check_valid_contents(SignalBorrowedBuffer buffer);

SignalFfiError *signal_receipt_credential_request_check_valid_contents(SignalBorrowedBuffer buffer);

SignalFfiError *signal_receipt_credential_request_context_check_valid_contents(SignalBorrowedBuffer buffer);

SignalFfiError *signal_receipt_credential_response_check_valid_contents(SignalBorrowedBuffer buffer);

SignalFfiError *signal_server_public_params_check_valid_contents(SignalBorrowedBuffer buffer);

SignalFfiError *signal_server_secret_params_check_valid_contents(SignalBorrowedBuffer buffer);

SignalFfiError *signal_uuid_ciphertext_check_valid_contents(SignalBorrowedBuffer buffer);

SignalFfiError *signal_profile_key_get_commitment(unsigned char (*out)[SignalPROFILE_KEY_COMMITMENT_LEN],
                                                  const unsigned char (*profile_key)[SignalPROFILE_KEY_LEN],
                                                  const uint8_t (*uuid)[16]);

SignalFfiError *signal_profile_key_get_profile_key_version(uint8_t (*out)[SignalPROFILE_KEY_VERSION_ENCODED_LEN],
                                                           const unsigned char (*profile_key)[SignalPROFILE_KEY_LEN],
                                                           const uint8_t (*uuid)[16]);

SignalFfiError *signal_group_secret_params_generate_deterministic(unsigned char (*out)[SignalGROUP_SECRET_PARAMS_LEN],
                                                                  const uint8_t (*randomness)[SignalRANDOMNESS_LEN]);

SignalFfiError *signal_group_secret_params_derive_from_master_key(unsigned char (*out)[SignalGROUP_SECRET_PARAMS_LEN],
                                                                  const unsigned char (*master_key)[SignalGROUP_MASTER_KEY_LEN]);

SignalFfiError *signal_group_secret_params_get_master_key(unsigned char (*out)[SignalGROUP_MASTER_KEY_LEN],
                                                          const unsigned char (*params)[SignalGROUP_SECRET_PARAMS_LEN]);

SignalFfiError *signal_group_secret_params_get_public_params(unsigned char (*out)[SignalGROUP_PUBLIC_PARAMS_LEN],
                                                             const unsigned char (*params)[SignalGROUP_SECRET_PARAMS_LEN]);

SignalFfiError *signal_group_secret_params_encrypt_uuid(unsigned char (*out)[SignalUUID_CIPHERTEXT_LEN],
                                                        const unsigned char (*params)[SignalGROUP_SECRET_PARAMS_LEN],
                                                        const uint8_t (*uuid)[16]);

SignalFfiError *signal_group_secret_params_decrypt_uuid(uint8_t (*out)[16],
                                                        const unsigned char (*params)[SignalGROUP_SECRET_PARAMS_LEN],
                                                        const unsigned char (*uuid)[SignalUUID_CIPHERTEXT_LEN]);

SignalFfiError *signal_group_secret_params_encrypt_profile_key(unsigned char (*out)[SignalPROFILE_KEY_CIPHERTEXT_LEN],
                                                               const unsigned char (*params)[SignalGROUP_SECRET_PARAMS_LEN],
                                                               const unsigned char (*profile_key)[SignalPROFILE_KEY_LEN],
                                                               const uint8_t (*uuid)[16]);

SignalFfiError *signal_group_secret_params_decrypt_profile_key(unsigned char (*out)[SignalPROFILE_KEY_LEN],
                                                               const unsigned char (*params)[SignalGROUP_SECRET_PARAMS_LEN],
                                                               const unsigned char (*profile_key)[SignalPROFILE_KEY_CIPHERTEXT_LEN],
                                                               const uint8_t (*uuid)[16]);

SignalFfiError *signal_group_secret_params_encrypt_blob_with_padding_deterministic(const unsigned char **out,
                                                                                   size_t *out_len,
                                                                                   const unsigned char (*params)[SignalGROUP_SECRET_PARAMS_LEN],
                                                                                   const uint8_t (*randomness)[SignalRANDOMNESS_LEN],
                                                                                   SignalBorrowedBuffer plaintext,
                                                                                   uint32_t padding_len);

SignalFfiError *signal_group_secret_params_decrypt_blob_with_padding(const unsigned char **out,
                                                                     size_t *out_len,
                                                                     const unsigned char (*params)[SignalGROUP_SECRET_PARAMS_LEN],
                                                                     SignalBorrowedBuffer ciphertext);

SignalFfiError *signal_server_secret_params_generate_deterministic(unsigned char (*out)[SignalSERVER_SECRET_PARAMS_LEN],
                                                                   const uint8_t (*randomness)[SignalRANDOMNESS_LEN]);

SignalFfiError *signal_server_secret_params_get_public_params(unsigned char (*out)[SignalSERVER_PUBLIC_PARAMS_LEN],
                                                              const unsigned char (*params)[SignalSERVER_SECRET_PARAMS_LEN]);

SignalFfiError *signal_server_secret_params_sign_deterministic(uint8_t (*out)[SignalSIGNATURE_LEN],
                                                               const unsigned char (*params)[SignalSERVER_SECRET_PARAMS_LEN],
                                                               const uint8_t (*randomness)[SignalRANDOMNESS_LEN],
                                                               SignalBorrowedBuffer message);

SignalFfiError *signal_server_public_params_receive_auth_credential(unsigned char (*out)[SignalAUTH_CREDENTIAL_LEN],
                                                                    const unsigned char (*params)[SignalSERVER_PUBLIC_PARAMS_LEN],
                                                                    const uint8_t (*uuid)[16],
                                                                    uint32_t redemption_time,
                                                                    const unsigned char (*response)[SignalAUTH_CREDENTIAL_RESPONSE_LEN]);

SignalFfiError *signal_server_public_params_create_auth_credential_presentation_deterministic(const unsigned char **out,
                                                                                              size_t *out_len,
                                                                                              const unsigned char (*server_public_params)[SignalSERVER_PUBLIC_PARAMS_LEN],
                                                                                              const uint8_t (*randomness)[SignalRANDOMNESS_LEN],
                                                                                              const unsigned char (*group_secret_params)[SignalGROUP_SECRET_PARAMS_LEN],
                                                                                              const unsigned char (*auth_credential)[SignalAUTH_CREDENTIAL_LEN]);

SignalFfiError *signal_server_public_params_create_profile_key_credential_request_context_deterministic(unsigned char (*out)[SignalPROFILE_KEY_CREDENTIAL_REQUEST_CONTEXT_LEN],
                                                                                                        const unsigned char (*server_public_params)[SignalSERVER_PUBLIC_PARAMS_LEN],
                                                                                                        const uint8_t (*randomness)[SignalRANDOMNESS_LEN],
                                                                                                        const uint8_t (*uuid)[16],
                                                                                                        const unsigned char (*profile_key)[SignalPROFILE_KEY_LEN]);

SignalFfiError *signal_server_public_params_create_pni_credential_request_context_deterministic(unsigned char (*out)[SignalPNI_CREDENTIAL_REQUEST_CONTEXT_LEN],
                                                                                                const unsigned char (*server_public_params)[SignalSERVER_PUBLIC_PARAMS_LEN],
                                                                                                const uint8_t (*randomness)[SignalRANDOMNESS_LEN],
                                                                                                const uint8_t (*aci)[16],
                                                                                                const uint8_t (*pni)[16],
                                                                                                const unsigned char (*profile_key)[SignalPROFILE_KEY_LEN]);

SignalFfiError *signal_server_public_params_receive_profile_key_credential(unsigned char (*out)[SignalPROFILE_KEY_CREDENTIAL_LEN],
                                                                           const unsigned char (*server_public_params)[SignalSERVER_PUBLIC_PARAMS_LEN],
                                                                           const unsigned char (*request_context)[SignalPROFILE_KEY_CREDENTIAL_REQUEST_CONTEXT_LEN],
                                                                           const unsigned char (*response)[SignalPROFILE_KEY_CREDENTIAL_RESPONSE_LEN]);

SignalFfiError *signal_server_public_params_receive_pni_credential(unsigned char (*out)[SignalPNI_CREDENTIAL_LEN],
                                                                   const unsigned char (*server_public_params)[SignalSERVER_PUBLIC_PARAMS_LEN],
                                                                   const unsigned char (*request_context)[SignalPNI_CREDENTIAL_REQUEST_CONTEXT_LEN],
                                                                   const unsigned char (*response)[SignalPNI_CREDENTIAL_RESPONSE_LEN]);

SignalFfiError *signal_server_public_params_create_profile_key_credential_presentation_deterministic(const unsigned char **out,
                                                                                                     size_t *out_len,
                                                                                                     const unsigned char (*server_public_params)[SignalSERVER_PUBLIC_PARAMS_LEN],
                                                                                                     const uint8_t (*randomness)[SignalRANDOMNESS_LEN],
                                                                                                     const unsigned char (*group_secret_params)[SignalGROUP_SECRET_PARAMS_LEN],
                                                                                                     const unsigned char (*profile_key_credential)[SignalPROFILE_KEY_CREDENTIAL_LEN]);

SignalFfiError *signal_server_public_params_create_pni_credential_presentation_deterministic(const unsigned char **out,
                                                                                             size_t *out_len,
                                                                                             const unsigned char (*server_public_params)[SignalSERVER_PUBLIC_PARAMS_LEN],
                                                                                             const uint8_t (*randomness)[SignalRANDOMNESS_LEN],
                                                                                             const unsigned char (*group_secret_params)[SignalGROUP_SECRET_PARAMS_LEN],
                                                                                             const unsigned char (*pni_credential)[SignalPNI_CREDENTIAL_LEN]);

SignalFfiError *signal_server_public_params_create_receipt_credential_request_context_deterministic(unsigned char (*out)[SignalRECEIPT_CREDENTIAL_REQUEST_CONTEXT_LEN],
                                                                                                    const unsigned char (*server_public_params)[SignalSERVER_PUBLIC_PARAMS_LEN],
                                                                                                    const uint8_t (*randomness)[SignalRANDOMNESS_LEN],
                                                                                                    const uint8_t (*receipt_serial)[SignalRECEIPT_SERIAL_LEN]);

SignalFfiError *signal_server_public_params_receive_receipt_credential(unsigned char (*out)[SignalRECEIPT_CREDENTIAL_LEN],
                                                                       const unsigned char (*server_public_params)[SignalSERVER_PUBLIC_PARAMS_LEN],
                                                                       const unsigned char (*request_context)[SignalRECEIPT_CREDENTIAL_REQUEST_CONTEXT_LEN],
                                                                       const unsigned char (*response)[SignalRECEIPT_CREDENTIAL_RESPONSE_LEN]);

SignalFfiError *signal_server_public_params_create_receipt_credential_presentation_deterministic(unsigned char (*out)[SignalRECEIPT_CREDENTIAL_PRESENTATION_LEN],
                                                                                                 const unsigned char (*server_public_params)[SignalSERVER_PUBLIC_PARAMS_LEN],
                                                                                                 const uint8_t (*randomness)[SignalRANDOMNESS_LEN],
                                                                                                 const unsigned char (*receipt_credential)[SignalRECEIPT_CREDENTIAL_LEN]);

SignalFfiError *signal_server_secret_params_issue_auth_credential_deterministic(unsigned char (*out)[SignalAUTH_CREDENTIAL_RESPONSE_LEN],
                                                                                const unsigned char (*server_secret_params)[SignalSERVER_SECRET_PARAMS_LEN],
                                                                                const uint8_t (*randomness)[SignalRANDOMNESS_LEN],
                                                                                const uint8_t (*uuid)[16],
                                                                                uint32_t redemption_time);

SignalFfiError *signal_server_secret_params_verify_auth_credential_presentation(const unsigned char (*server_secret_params)[SignalSERVER_SECRET_PARAMS_LEN],
                                                                                const unsigned char (*group_public_params)[SignalGROUP_PUBLIC_PARAMS_LEN],
                                                                                SignalBorrowedBuffer presentation_bytes);

SignalFfiError *signal_server_secret_params_issue_profile_key_credential_deterministic(unsigned char (*out)[SignalPROFILE_KEY_CREDENTIAL_RESPONSE_LEN],
                                                                                       const unsigned char (*server_secret_params)[SignalSERVER_SECRET_PARAMS_LEN],
                                                                                       const uint8_t (*randomness)[SignalRANDOMNESS_LEN],
                                                                                       const unsigned char (*request)[SignalPROFILE_KEY_CREDENTIAL_REQUEST_LEN],
                                                                                       const uint8_t (*uuid)[16],
                                                                                       const unsigned char (*commitment)[SignalPROFILE_KEY_COMMITMENT_LEN]);

SignalFfiError *signal_server_secret_params_issue_pni_credential_deterministic(unsigned char (*out)[SignalPNI_CREDENTIAL_RESPONSE_LEN],
                                                                               const unsigned char (*server_secret_params)[SignalSERVER_SECRET_PARAMS_LEN],
                                                                               const uint8_t (*randomness)[SignalRANDOMNESS_LEN],
                                                                               const unsigned char (*request)[SignalPROFILE_KEY_CREDENTIAL_REQUEST_LEN],
                                                                               const uint8_t (*aci)[16],
                                                                               const uint8_t (*pni)[16],
                                                                               const unsigned char (*commitment)[SignalPROFILE_KEY_COMMITMENT_LEN]);

SignalFfiError *signal_server_secret_params_verify_profile_key_credential_presentation(const unsigned char (*server_secret_params)[SignalSERVER_SECRET_PARAMS_LEN],
                                                                                       const unsigned char (*group_public_params)[SignalGROUP_PUBLIC_PARAMS_LEN],
                                                                                       SignalBorrowedBuffer presentation_bytes);

SignalFfiError *signal_server_secret_params_verify_pni_credential_presentation(const unsigned char (*server_secret_params)[SignalSERVER_SECRET_PARAMS_LEN],
                                                                               const unsigned char (*group_public_params)[SignalGROUP_PUBLIC_PARAMS_LEN],
                                                                               SignalBorrowedBuffer presentation_bytes);

SignalFfiError *signal_server_secret_params_issue_receipt_credential_deterministic(unsigned char (*out)[SignalRECEIPT_CREDENTIAL_RESPONSE_LEN],
                                                                                   const unsigned char (*server_secret_params)[SignalSERVER_SECRET_PARAMS_LEN],
                                                                                   const uint8_t (*randomness)[SignalRANDOMNESS_LEN],
                                                                                   const unsigned char (*request)[SignalRECEIPT_CREDENTIAL_REQUEST_LEN],
                                                                                   uint64_t receipt_expiration_time,
                                                                                   uint64_t receipt_level);

SignalFfiError *signal_server_secret_params_verify_receipt_credential_presentation(const unsigned char (*server_secret_params)[SignalSERVER_SECRET_PARAMS_LEN],
                                                                                   const unsigned char (*presentation)[SignalRECEIPT_CREDENTIAL_PRESENTATION_LEN]);

SignalFfiError *signal_group_public_params_get_group_identifier(uint8_t (*out)[SignalGROUP_IDENTIFIER_LEN],
                                                                const unsigned char (*group_public_params)[SignalGROUP_PUBLIC_PARAMS_LEN]);

SignalFfiError *signal_server_public_params_verify_signature(const unsigned char (*server_public_params)[SignalSERVER_PUBLIC_PARAMS_LEN],
                                                             SignalBorrowedBuffer message,
                                                             const uint8_t (*notary_signature)[SignalSIGNATURE_LEN]);

SignalFfiError *signal_auth_credential_presentation_check_valid_contents(SignalBorrowedBuffer presentation_bytes);

SignalFfiError *signal_auth_credential_presentation_get_uuid_ciphertext(unsigned char (*out)[SignalUUID_CIPHERTEXT_LEN],
                                                                        SignalBorrowedBuffer presentation_bytes);

SignalFfiError *signal_auth_credential_presentation_get_redemption_time(uint32_t *out,
                                                                        SignalBorrowedBuffer presentation_bytes);

SignalFfiError *signal_profile_key_credential_request_context_get_request(unsigned char (*out)[SignalPROFILE_KEY_CREDENTIAL_REQUEST_LEN],
                                                                          const unsigned char (*context)[SignalPROFILE_KEY_CREDENTIAL_REQUEST_CONTEXT_LEN]);

SignalFfiError *signal_pni_credential_request_context_get_request(unsigned char (*out)[SignalPROFILE_KEY_CREDENTIAL_REQUEST_LEN],
                                                                  const unsigned char (*context)[SignalPNI_CREDENTIAL_REQUEST_CONTEXT_LEN]);

SignalFfiError *signal_profile_key_credential_presentation_check_valid_contents(SignalBorrowedBuffer presentation_bytes);

SignalFfiError *signal_profile_key_credential_presentation_get_uuid_ciphertext(unsigned char (*out)[SignalUUID_CIPHERTEXT_LEN],
                                                                               SignalBorrowedBuffer presentation_bytes);

SignalFfiError *signal_profile_key_credential_presentation_get_profile_key_ciphertext(unsigned char (*out)[SignalPROFILE_KEY_CIPHERTEXT_LEN],
                                                                                      SignalBorrowedBuffer presentation_bytes);

SignalFfiError *signal_pni_credential_presentation_check_valid_contents(SignalBorrowedBuffer presentation_bytes);

SignalFfiError *signal_pni_credential_presentation_get_aci_ciphertext(unsigned char (*out)[SignalUUID_CIPHERTEXT_LEN],
                                                                      SignalBorrowedBuffer presentation_bytes);

SignalFfiError *signal_pni_credential_presentation_get_pni_ciphertext(unsigned char (*out)[SignalUUID_CIPHERTEXT_LEN],
                                                                      SignalBorrowedBuffer presentation_bytes);

SignalFfiError *signal_pni_credential_presentation_get_profile_key_ciphertext(unsigned char (*out)[SignalPROFILE_KEY_CIPHERTEXT_LEN],
                                                                              SignalBorrowedBuffer presentation_bytes);

SignalFfiError *signal_receipt_credential_request_context_get_request(unsigned char (*out)[SignalRECEIPT_CREDENTIAL_REQUEST_LEN],
                                                                      const unsigned char (*request_context)[SignalRECEIPT_CREDENTIAL_REQUEST_CONTEXT_LEN]);

SignalFfiError *signal_receipt_credential_get_receipt_expiration_time(uint64_t *out,
                                                                      const unsigned char (*receipt_credential)[SignalRECEIPT_CREDENTIAL_LEN]);

SignalFfiError *signal_receipt_credential_get_receipt_level(uint64_t *out,
                                                            const unsigned char (*receipt_credential)[SignalRECEIPT_CREDENTIAL_LEN]);

SignalFfiError *signal_receipt_credential_presentation_get_receipt_expiration_time(uint64_t *out,
                                                                                   const unsigned char (*presentation)[SignalRECEIPT_CREDENTIAL_PRESENTATION_LEN]);

SignalFfiError *signal_receipt_credential_presentation_get_receipt_level(uint64_t *out,
                                                                         const unsigned char (*presentation)[SignalRECEIPT_CREDENTIAL_PRESENTATION_LEN]);

SignalFfiError *signal_receipt_credential_presentation_get_receipt_serial(uint8_t (*out)[SignalRECEIPT_SERIAL_LEN],
                                                                          const unsigned char (*presentation)[SignalRECEIPT_CREDENTIAL_PRESENTATION_LEN]);

#endif /* SIGNAL_FFI_H_ */
